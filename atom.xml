<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Life is short, you need Python</title>
  
  <subtitle>Peng Liu`s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liupeng0518.github.io/"/>
  <updated>2021-06-14T17:19:06.984Z</updated>
  <id>http://liupeng0518.github.io/</id>
  
  <author>
    <name>Peng Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>就绪的k8s集群中修改cluster cidr</title>
    <link href="http://liupeng0518.github.io/2020/11/19/k8s/Network/calico/change%20cidr/"/>
    <id>http://liupeng0518.github.io/2020/11/19/k8s/Network/calico/change%20cidr/</id>
    <published>2020-11-19T09:47:19.000Z</published>
    <updated>2021-06-14T17:19:06.984Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文：<a href="https://stackoverflow.com/questions/60176343/how-to-make-the-pod-cidr-range-larger-in-kubernetes-cluster-deployed-with-kubead" target="_blank" rel="noopener">https://stackoverflow.com/questions/60176343/how-to-make-the-pod-cidr-range-larger-in-kubernetes-cluster-deployed-with-kubead</a></p></blockquote><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>这里是使用的<code>kubespray</code>部署的大规模集群，集群网络插件calico，并使用etcd做calico后端。</p><p>修改cluster-cidr并不是一件简单的事情，谨慎操作</p><h1 id="Changing-an-IP-pool"><a href="#Changing-an-IP-pool" class="headerlink" title="Changing an IP pool"></a><strong>Changing an IP pool</strong></h1><p>主要的流程 :</p><ol><li>Install calicoctl as a Kubernetes pod (<a href="https://docs.projectcalico.org/getting-started/calicoctl/install#installing-calicoctl-as-a-kubernetes-pod" target="_blank" rel="noopener">Source</a>)</li><li>Add a new IP pool (<a href="https://docs.projectcalico.org/v3.6/networking/changing-ip-pools" target="_blank" rel="noopener">Source</a>).</li><li>Disable the old IP pool. This prevents new IPAM allocations from the old IP pool without affecting the networking of existing workloads.</li><li>Change nodes <code>podCIDR</code> parameter (<a href="https://serverfault.com/questions/976513/is-it-possible-to-change-cidr-network-flannel-and-kubernetes" target="_blank" rel="noopener">Source</a>)</li><li>Change <code>--cluster-cidr</code> on <code>kube-controller-manager.yaml</code> on master node. (Credits to <a href="https://stackoverflow.com/users/6759406/mm-wvu18" target="_blank" rel="noopener">OP</a> on that)</li><li>Recreate all existing workloads that were assigned an address from the old IP pool.</li><li>Remove the old IP pool.</li></ol><p>我们开始：</p><p>在这个事例中, 我们将<code>10.234.0.0/15</code>替换为<code>192.232.0.0/14</code></p><ol><li>添加一个新的ippool:</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">calicoctl</span> <span class="string">create</span> <span class="string">-f</span> <span class="string">-&lt;&lt;EOF</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">projectcalico.org/v3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IPPool</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">new-pool</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">cidr:</span> <span class="number">192.232</span><span class="number">.0</span><span class="number">.0</span><span class="string">/14</span></span><br><span class="line"><span class="attr">ipipMode:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">natOutgoing:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>现在应该有两个enabled的 IP pools,来看一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> calicoctl get ippool -o wide</span></span><br><span class="line"></span><br><span class="line">NAME                  CIDR             NAT    IPIPMODE   DISABLED</span><br><span class="line">default-ipv4-ippool   10.234.0.0/15   true   Always     false</span><br><span class="line">new-pool              192.232.0.0/14       true   Always     false</span><br></pre></td></tr></table></figure><ol start="2"><li>Disable 旧的 IP pool.<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># calicoctl get ippool -o yaml &gt; pool.yaml</span></span><br><span class="line"><span class="comment"># cat pool.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">projectcalico.org/v3</span></span><br><span class="line"><span class="attr">items:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiVersion:</span> <span class="string">projectcalico.org/v3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IPPool</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">default-ipv4-ippool</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">cidr:</span> <span class="number">10.234</span><span class="number">.0</span><span class="number">.0</span><span class="string">/15</span></span><br><span class="line"><span class="attr">ipipMode:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">natOutgoing:</span> <span class="literal">true</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiVersion:</span> <span class="string">projectcalico.org/v3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IPPool</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">new-pool</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">cidr:</span> <span class="number">192.232</span><span class="number">.0</span><span class="number">.0</span><span class="string">/14</span></span><br><span class="line"><span class="attr">ipipMode:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">natOutgoing:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>Note: 这里为了提高可读性，并防止apply出错，可以删除一些无用的字段<br>blockSize大小注意默认是/26</p></blockquote><p>修改文件将旧的ippool<code>default-ipv4-ippool</code>禁用,  <code>disabled: true</code> :</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">projectcalico.org/v3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IPPool</span></span><br><span class="line"><span class="string">metadata:5</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">default-ipv4-ippool</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">cidr:</span> <span class="number">10.234</span><span class="number">.0</span><span class="number">.0</span><span class="string">/15</span></span><br><span class="line"><span class="attr">ipipMode:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">natOutgoing:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">disabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p> 应用配置修改:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">calicoctl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">pool.yaml</span></span><br></pre></td></tr></table></figure><p>再来查看一下配置信息 <code>calicoctl get ippool -o wide</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NAME                  CIDR             NAT    IPIPMODE   DISABLED</span><br><span class="line">default-ipv4-ippool   10.234.0.0/15   true   Always     true</span><br><span class="line">new-pool              192.232.0.0/14       true   Always     false</span><br></pre></td></tr></table></figure><ol start="3"><li>修改 nodes <code>podCIDR</code> 参数:</li></ol><p>使用新的IP cidr覆盖指定的k8s节点资源上的<code>podCIDR</code>参数：</p><p>如果节点数量少的话，可以简单替换</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">get</span> <span class="literal">no</span> <span class="string">kubeadm-0</span> <span class="string">-o</span> <span class="string">yaml</span> <span class="string">&gt;</span> <span class="string">file.yaml;</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s~10.234.0.0/24~192.232.0.0/24~"</span> <span class="string">file.yaml;</span> <span class="string">kubectl</span> <span class="string">delete</span> <span class="literal">no</span> <span class="string">kubeadm-0</span> <span class="string">&amp;&amp;</span> <span class="string">kubectl</span> <span class="string">create</span> <span class="string">-f</span> <span class="string">file.yaml</span></span><br><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">get</span> <span class="literal">no</span> <span class="string">kubeadm-1</span> <span class="string">-o</span> <span class="string">yaml</span> <span class="string">&gt;</span> <span class="string">file.yaml;</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">"s~10.234.1.0/24~1192.232.1.0/24~"</span> <span class="string">file.yaml;</span> <span class="string">kubectl</span> <span class="string">delete</span> <span class="literal">no</span> <span class="string">kubeadm-1</span> <span class="string">&amp;&amp;</span> <span class="string">kubectl</span> <span class="string">create</span> <span class="string">-f</span> <span class="string">file.yaml</span></span><br></pre></td></tr></table></figure><p>如果数量庞大的话,比如我这里接近1000node，显然手工一台台替换是不可能的，我们可以准备一个node.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Node</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubeadm.alpha.kubernetes.io/cri-socket:</span> <span class="string">/var/run/dockershim.sock</span></span><br><span class="line">    <span class="attr">node.alpha.kubernetes.io/ttl:</span> <span class="string">"30"</span></span><br><span class="line">    <span class="attr">volumes.kubernetes.io/controller-managed-attach-detach:</span> <span class="string">"true"</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">beta.kubernetes.io/arch:</span> <span class="string">amd64</span></span><br><span class="line">    <span class="attr">beta.kubernetes.io/os:</span> <span class="string">linux</span></span><br><span class="line">    <span class="attr">kubernetes.io/arch:</span> <span class="string">amd64</span></span><br><span class="line">    <span class="attr">kubernetes.io/hostname:</span> <span class="string">$hostname</span></span><br><span class="line">    <span class="attr">kubernetes.io/os:</span> <span class="string">linux</span></span><br><span class="line">    <span class="string">node-role.kubernetes.io/$role:</span> <span class="string">""</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">$hostname</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">podCIDR:</span> <span class="string">$ipcidr</span></span><br><span class="line">  <span class="attr">podCIDRs:</span></span><br><span class="line">  <span class="string">-$ipcidr</span></span><br><span class="line">  <span class="attr">taints:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">node.kubernetes.io/unschedulable</span></span><br><span class="line">  <span class="attr">unschedulable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>只需替换$hostname/$ipcidr/$role即可，首先获取原集群这hostname和role的对应关系</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">node=`kubectl get node -owide |awk '&#123;print $1&#125;'|grep -v NAME`</span><br><span class="line">for i in $node; do</span><br><span class="line">    CIDR=`kubectl get node $i -oyaml|grep podCIDR|grep -v podCIDRs|awk '&#123;print $NF&#125;'`</span><br><span class="line">    roles=`kubectl get node $i -oyaml|grep node-role`</span><br><span class="line">    echo $i,$CIDR,$roles</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>导出对应关系后，追加ipcidr（提前规划好），例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">192.232.1.0</span><br><span class="line">192.232.2.0</span><br><span class="line">192.232.3.0</span><br><span class="line">192.232.4.0</span><br><span class="line">192.232.5.0</span><br><span class="line">192.232.6.0</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>合并列表，格式<code>$hostname $role $ipidr</code>，例如<code>host_lists</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test1 node 192.168.0.0/24 </span><br><span class="line">test2 master 192.168.1.0/24</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>依次替换变量并apply：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="comment"># echo $line</span></span><br><span class="line">    <span class="comment"># echo $hostname $role $cidr</span></span><br><span class="line">    hostname=`<span class="built_in">echo</span> <span class="variable">$line</span> | awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line">    role=`<span class="built_in">echo</span> <span class="variable">$line</span> | awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">    ipcidr=`<span class="built_in">echo</span> <span class="variable">$line</span> | awk <span class="string">'&#123;print $3&#125;'</span>`</span><br><span class="line"></span><br><span class="line">    cp node-template.yml /tmp/<span class="variable">$&#123;hostname&#125;</span>.yml</span><br><span class="line">    <span class="built_in">eval</span> <span class="string">"cat &lt;&lt;EOF</span></span><br><span class="line"><span class="string"><span class="variable">$(&lt; /tmp/$&#123;hostname&#125;.yml)</span></span></span><br><span class="line"><span class="string">    EOF"</span></span><br><span class="line"><span class="keyword">done</span> &lt; host_lists</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$host_template</span></span><br></pre></td></tr></table></figure><p>我们必须对我们拥有的每个节点执行此操作。注意IP范围，它们在每一个节点之间是不同的。</p><ol start="4"><li>修改   kube-proxy \ kubeadm-config ConfigMap 和 kube-controller-manager.yaml 的CIDR</li></ol><p>编辑 kubeadm-config ConfigMap 并 修改 podSubnet 至新IP Range:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system edit cm kubeadm-config</span><br></pre></td></tr></table></figure><p>然后, 修改master节点的 <code>--cluster-cidr</code>  /etc/kubernetes/manifests/kube-controller-manager.yaml </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">sudo</span> <span class="string">cat</span> <span class="string">/etc/kubernetes/manifests/kube-controller-manager.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">component:</span> <span class="string">kube-controller-manager</span></span><br><span class="line">    <span class="attr">tier:</span> <span class="string">control-plane</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-controller-manager</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kube-controller-manager</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--allocate-node-cidrs=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--authentication-kubeconfig=/etc/kubernetes/controller-manager.conf</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--authorization-kubeconfig=/etc/kubernetes/controller-manager.conf</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--bind-address=127.0.0.1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--client-ca-file=/etc/kubernetes/pki/ca.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--cluster-cidr=192.232.0.0/14</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--cluster-signing-key-file=/etc/kubernetes/pki/ca.key</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--controllers=*,bootstrapsigner,tokencleaner</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--kubeconfig=/etc/kubernetes/controller-manager.conf</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--leader-elect=true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--node-cidr-mask-size=24</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--root-ca-file=/etc/kubernetes/pki/ca.crt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--service-account-private-key-file=/etc/kubernetes/pki/sa.key</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--service-cluster-ip-range=10.96.0.0/12</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--use-service-account-credentials=true</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p>修改calico配置<code>ipv4_pools</code> /etc/cni/net.d/10-calico.conflist 和 /etc/cni/net.d/calico.conflist.template</p></li><li><p>重启所有pod:</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">kubectl</span> <span class="string">delete</span> <span class="string">pod</span> <span class="string">-n</span> <span class="string">kube-system</span> <span class="string">kube-dns-6f4fd4bdf-8q7zp</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>检查workload <code>calicoctl get wep --all-namespaces</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">NAMESPACE</span>     <span class="string">WORKLOAD</span>                   <span class="string">NODE</span>      <span class="string">NETWORKS</span>            <span class="string">INTERFACE</span></span><br><span class="line"><span class="string">kube-system</span>   <span class="string">kube-dns-6f4fd4bdf-8q7zp</span>   <span class="string">vagrant</span>   <span class="number">10.0</span><span class="number">.24</span><span class="number">.8</span><span class="string">/32</span>   <span class="string">cali800a63073ed</span></span><br></pre></td></tr></table></figure><ol start="7"><li>删除旧的 IP pool:</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">calicoctl</span> <span class="string">delete</span> <span class="string">pool</span> <span class="string">default-ipv4-ippool</span></span><br></pre></td></tr></table></figure><h1 id="Creating-it-correctly-from-scratch"><a href="#Creating-it-correctly-from-scratch" class="headerlink" title="Creating it correctly from scratch"></a><strong>Creating it correctly from scratch</strong></h1><p>To deploy a cluster under a specific IP range using Kubeadm and Calico you need to init the cluster with <code>--pod-network-cidr=192.168.0.0/24</code> (where <code>192.168.0.0/24</code> is your desired range) and than you need to tune the Calico manifest before applying it in your fresh cluster.</p><p>To tune Calico before applying, you have to download it’s yaml file and change the network range.</p><ol><li>Download the Calico networking manifest for the Kubernetes.</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">curl</span> <span class="string">https://docs.projectcalico.org/manifests/calico.yaml</span> <span class="string">-O</span></span><br></pre></td></tr></table></figure><ol start="2"><li>If you are using pod CIDR</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.0.0/24</span><br></pre></td></tr></table></figure><p>   , skip to the next step. If you are using a different pod CIDR, use the following commands to set an environment variable called</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POD_CIDR</span><br></pre></td></tr></table></figure><p>   containing your pod CIDR and replace</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.0.0/24</span><br></pre></td></tr></table></figure><p>   in the manifest with your pod CIDR.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">POD_CIDR="&lt;your-pod-cidr&gt;"</span> <span class="string">\</span></span><br><span class="line">   <span class="string">sed</span> <span class="string">-i</span> <span class="string">-e</span> <span class="string">"s?192.168.0.0/16?$POD_CIDR?g"</span> <span class="string">calico.yaml</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Apply the manifest using the following command.</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">calico.yaml</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;原文：&lt;a href=&quot;https://stackoverflow.com/questions/60176343/how-to-make-the-pod-cidr-range-larger-in-kubernetes-cluster-deploye
      
    
    </summary>
    
    
      <category term="k8s" scheme="http://liupeng0518.github.io/categories/k8s/"/>
    
    
      <category term="network" scheme="http://liupeng0518.github.io/tags/network/"/>
    
      <category term="kubernetes" scheme="http://liupeng0518.github.io/tags/kubernetes/"/>
    
      <category term="calico" scheme="http://liupeng0518.github.io/tags/calico/"/>
    
  </entry>
  
  <entry>
    <title>mips/arm下如何编译netty-transport-native-epoll</title>
    <link href="http://liupeng0518.github.io/2020/04/06/dev/java/mipsarm%E4%B8%8B%E5%A6%82%E4%BD%95%E7%BC%96%E8%AF%91netty-transport-native-epoll/"/>
    <id>http://liupeng0518.github.io/2020/04/06/dev/java/mipsarm%E4%B8%8B%E5%A6%82%E4%BD%95%E7%BC%96%E8%AF%91netty-transport-native-epoll/</id>
    <published>2020-04-06T09:47:19.000Z</published>
    <updated>2021-06-14T17:19:06.948Z</updated>
    
    <content type="html"><![CDATA[<ol><li>安装apr</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://archive.apache.org/dist/apr/apr-1.6.5.tar.gz</span><br><span class="line">tar zxvf apr-1.6.5.tar.gz </span><br><span class="line"></span><br><span class="line">cd apr-1.6.5</span><br><span class="line">./configure </span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>如果这里报错:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm: cannot remove `libtoolT&apos;: No such file or directory</span><br></pre></td></tr></table></figure></p><p>可以注释<code>$RM &quot;$cfgfile&quot;</code></p><p>编译nettry相关的组件的话，简易os-maven-plugin替换为1.6.2，这里支持了mips架构</p><ol start="2"><li>编译 transport-native-unix-common<br>pom中屏蔽只对x86和arm64架构的jdk判断</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mvn  install -DskipTests=true</span><br><span class="line">`</span><br></pre></td></tr></table></figure><ol start="3"><li>编译netty-tcnative</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里有几个google的git仓库，可替换为github即可。<br><a href="https://github.com/google/boringssl.git" target="_blank" rel="noopener">https://github.com/google/boringssl.git</a></p><ol start="4"><li>编译</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;安装apr&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
    
      <category term="java" scheme="http://liupeng0518.github.io/categories/java/"/>
    
    
      <category term="netty" scheme="http://liupeng0518.github.io/tags/netty/"/>
    
  </entry>
  
  <entry>
    <title>calixxxxx@ifxx 什么意思?</title>
    <link href="http://liupeng0518.github.io/2020/02/21/k8s/Network/calixxxxx@ifxx/"/>
    <id>http://liupeng0518.github.io/2020/02/21/k8s/Network/calixxxxx@ifxx/</id>
    <published>2020-02-21T09:47:19.000Z</published>
    <updated>2021-06-14T17:19:06.984Z</updated>
    
    <content type="html"><![CDATA[<p>我们在查看ip的时候会看到好多@符号的接口，这些@是代表什么意思？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@node2:~<span class="comment"># ip link show</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">2: ens192: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:b7:39:4f brd ff:ff:ff:ff:ff:ff</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default </span><br><span class="line">    link/ether 02:42:b9:0c:5c:cb brd ff:ff:ff:ff:ff:ff</span><br><span class="line">9: tunl0@NONE: &lt;NOARP,UP,LOWER_UP&gt; mtu 1440 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ipip 0.0.0.0 brd 0.0.0.0</span><br><span class="line">274: kube-ipvs0: &lt;BROADCAST,NOARP&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default </span><br><span class="line">    link/ether b6:71:1e:40:13:87 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">280: calia0b2c8c3089@if4: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default </span><br><span class="line">    link/ether ee:ee:ee:ee:ee:ee brd ff:ff:ff:ff:ff:ff link-netnsid 1</span><br><span class="line">281: nodelocaldns: &lt;BROADCAST,NOARP&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default </span><br><span class="line">    link/ether b2:23:f2:dd:e2:87 brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure><h1 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h1><p>对于这个设备来说，这其实是一个veth peer：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@node2:~<span class="comment"># ip -d link show dev cali2014790e81d</span></span><br><span class="line">339: cali2014790e81d@if4: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default </span><br><span class="line">    link/ether ee:ee:ee:ee:ee:ee brd ff:ff:ff:ff:ff:ff link-netnsid 4 promiscuity 0 </span><br><span class="line">    veth addrgenmode eui64 numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535</span><br></pre></td></tr></table></figure><p>我们看到最后一行有veth字样，代表这是一个veth设备。</p><p>对这个@if4来说，这表示 link’s peer 端口的索引。尽管这个属性似乎对任何接口都可用，但它只适用于几种接口类型:veth、macvlan、vlan(子接口)，表示和另一个接口的关系。</p><p>任何接口都会有一个索引：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sys/class/net/&lt;interface&gt;/ifindex</span><br></pre></td></tr></table></figure><p>peer link interface可以在此查看:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sys/class/net/&lt;interface&gt;/iflink</span><br></pre></td></tr></table></figure><p>常见的接口（像真实硬件eth0，wlan0，dummy0等），他没有显示任何内容，其实它也存在的，因为值和<em>ifindex</em>一样隐藏了而已。</p><p>ip link命令仅解释iflink值的含义：</p><ul><li><p>如果iflink为0（显然它是个ipip隧道，它在网络名称空间中的表现也很特殊），它将显示@NONE</p></li><li><p>如果iflink没有匹配的ifindex，它将显示@ifXX，其中XX是ifindex。没有匹配的ifindex的时候，可以证明它关联到另一个net namespace中了，稍后分析。</p></li><li><p>如果iflink是自己本身（iflink == ifindex），它将不显示任何@。这就是真实接口（eth0 …）存在的情况，但也可能是一个bug（请参阅下文）。</p></li><li><p>如果iflink匹配到ifindex，它将显示该索引的名称。</p></li></ul><h1 id="什么时候找不到匹配的ifindex？"><a href="#什么时候找不到匹配的ifindex？" class="headerlink" title="什么时候找不到匹配的ifindex？"></a>什么时候找不到匹配的ifindex？</h1><p>什么时候找不到ifindex，答案是当该<em>interface</em>位于另一个<em>network namespace</em>中时，我们可以通过末尾的link-netnsid来确定。</p><p>这个index在<em>ip link</em>命令中不会显示，它代表了相应peer network namespace本地分配的nsid。</p><p>对于容器来说，第一个（也可能是唯一一个）值0几乎总是代表主机的net namespace。对于主机，每个容器可能会有一个link-netnsid值，第一个容器的link-netnsid为0。这里要注意，该值是net namespace的local value，而不是绝对ID，因此无法在两个net namespace之间直接进行比较。</p><p>因此，找不到ifindex肯定意味着它在另一个namespace中，可以通过link-netnsid属性来确认。</p><p>有时，iflink（即 <em>peer</em> interface的索引值）在另一个net namespace中时，恰好具有与本地接口（在当前 net namespace中）相同的ID。ip link在这种情况下将不会显示任何@，识别为一个普通的接口，但这是错误的，例如在这种情况下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ip -o link show dev veth1</span></span><br><span class="line">3: veth1: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000\    link/ether 7e:d9:ca:77:87:01 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line"><span class="comment"># cat /sys/class/net/veth1/&#123;ifindex,iflink&#125;</span></span><br><span class="line">3</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>（注意，link-netnsid 0的存在意味着链接在另一个net namespace中。）</p><p>原文：</p><p><a href="https://unix.stackexchange.com/questions/444892/what-does-if1if2-mean-in-interface-name-in-output-of-ip-address-command-on" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/444892/what-does-if1if2-mean-in-interface-name-in-output-of-ip-address-command-on</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们在查看ip的时候会看到好多@符号的接口，这些@是代表什么意思？&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;s
      
    
    </summary>
    
    
      <category term="k8s" scheme="http://liupeng0518.github.io/categories/k8s/"/>
    
    
      <category term="network" scheme="http://liupeng0518.github.io/tags/network/"/>
    
      <category term="k8s" scheme="http://liupeng0518.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>ipvsadm使用</title>
    <link href="http://liupeng0518.github.io/2020/02/10/linux/lvs/ipvsadm%E4%BD%BF%E7%94%A8/"/>
    <id>http://liupeng0518.github.io/2020/02/10/linux/lvs/ipvsadm%E4%BD%BF%E7%94%A8/</id>
    <published>2020-02-10T09:47:19.000Z</published>
    <updated>2021-06-14T17:19:06.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IPVSADM的使用"><a href="#IPVSADM的使用" class="headerlink" title="IPVSADM的使用"></a>IPVSADM的使用</h1><p>ipvsadm是一个工具，同时它也是一条命令，用于管理LVS的策略规则。</p><h2 id="命令语法、子命令和选项"><a href="#命令语法、子命令和选项" class="headerlink" title="命令语法、子命令和选项"></a>命令语法、子命令和选项</h2><p>语法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  ipvsadm -A|E -t|u|f &lt;集群服务地址&gt; [-s &lt;调度算法&gt;] [-p &lt;超时时间&gt;] [-M &lt;掩码&gt;] [-b &lt;标志&gt;]</span><br><span class="line">  ipvsadm -D -t|u|f &lt;集群服务地址&gt;</span><br><span class="line">  ipvsadm -C</span><br><span class="line">  ipvsadm -R</span><br><span class="line">  ipvsadm -S [-n]</span><br><span class="line">  ipvsadm -a|e -t|u|f &lt;集群服务地址&gt; -r &lt;真实服务器地址&gt; [选项]</span><br><span class="line">  ipvsadm -d -t|u|f &lt;集群服务地址&gt; -r &lt;真实服务器地址&gt;</span><br><span class="line">  ipvsadm -L|l [options]</span><br><span class="line">  ipvsadm -Z [-t|u|f &lt;集群服务地址&gt;]</span><br><span class="line">  ipvsadm --<span class="built_in">set</span> &lt;超时时间&gt;</span><br><span class="line">  ipvsadm --start-daemon &lt;主或备&gt; [--mcast-interface &lt;组播接口&gt;] [--syncid &lt;SID&gt;]</span><br><span class="line">  ipvsadm --stop-daemon &lt;主或备&gt;</span><br><span class="line">  ipvsadm -h</span><br><span class="line">子命令：</span><br><span class="line">  --add-service     -A        添加一个集群服务，需要使用选项</span><br><span class="line">  --edit-service    -E        编辑一个集群服务，需要使用选项</span><br><span class="line">  --delete-service  -D        删除指定集群服务，需要使用选项</span><br><span class="line">  --clear           -C        删除所有集群服务，包括真实服务器转发策略规则</span><br><span class="line">  --restore         -R        从标准输入中恢复策略规则</span><br><span class="line">  --save            -S        保存策略规则到标准输出</span><br><span class="line">  --add-server      -a        添加一个真实服务器，需要使用选项</span><br><span class="line">  --edit-server     -e        编辑一个真实服务器，需要使用选项</span><br><span class="line">  --delete-server   -d        删除一个真实服务器，需要使用选项</span><br><span class="line">  --list            -L|-l     查看集群服务列表，包括真实服务器转发策略规则</span><br><span class="line">  --zero            -Z        计数器清零。清除连接数、包转发等数量统计信息</span><br><span class="line">  --<span class="built_in">set</span> &lt;超时时间&gt;            设置TCP、TCPFIN（TCP关闭连接状态）、UDP连接超时时间，用于</span><br><span class="line">                              会话保持。一般情况下TCP和UDP超时时间保持默认就好，TCPFIN</span><br><span class="line">                              可以根据情况设定，指定它则用户请求连接关闭，该连接则会变</span><br><span class="line">                              为非活跃（InActive）空闲等待状态，在空闲等待时间内，如果</span><br><span class="line">                              来自同一源IP的请求，则还会转发给后端的同一台真实服务器上</span><br><span class="line">  --start-daemon              开启连接同步守护进程。在选项后面指定自己是Master（主）还</span><br><span class="line">                              是backup（备），主负载调度器会同步所有策略及连接状态到备</span><br><span class="line">                              负载调度器，当主故障，备可以接替其工作</span><br><span class="line">  --stop-daemon               停止连接同步守护进程</span><br><span class="line">  --<span class="built_in">help</span>            -h        显示帮助信息</span><br><span class="line">选项:</span><br><span class="line">  --tcp-service  -t  &lt;集群服务地址&gt;   允许集群服务使用的传输协议为TCP。&lt;IP:Port&gt;</span><br><span class="line">  --udp-service  -u &lt;集群服务地址&gt;    允许集群服务使用的传输协议为UDP。&lt;IP:Port&gt;</span><br><span class="line">  --fwmark-service  -f &lt;防火墙标识&gt;   使用一个整数值来防火墙标识集群服务，而不是地址、</span><br><span class="line">                                     端口和协议使用它，我们可以通过结合IPtables将多</span><br><span class="line">                                     个以调度器为目标的端口定义成一个防火墙标识，由</span><br><span class="line">                                     ipvsdam通过此项关联标识，则可以实现对一个IP多</span><br><span class="line">                                     端口调度，即实现后端服务器可以开放多个服务</span><br><span class="line">  --scheduler    -s scheduler         指定集群服务使用的调度算法：rr|wrr|lc|wlc|lblc</span><br><span class="line">                                      |lblcr|dh|sh|sed|nq，默认为wlc</span><br><span class="line">  --persistent   -p &lt;超时时间&gt;        开启持久化服务，开启它则表示在指定时间内，来自同</span><br><span class="line">                                      一IP的请求都会转发到后端同一台真实服务器上</span><br><span class="line">  --netmask      -M &lt;网络掩码&gt;        使用网络掩码来屏蔽持久化来源IP的地址范围，默认值</span><br><span class="line">                                      为255.255.255.255，即所有来源IP请求都会享受持久</span><br><span class="line">                                      化服务</span><br><span class="line">  --real-server  -r &lt;真实服务器地址&gt;  指定真实服务器的主机IP与端口</span><br><span class="line">  --gatewaying   -g                   指定真实服务器转发工作模式，使用DR模式，默认</span><br><span class="line">  --ipip         -i                   指定真实服务器转发工作模式，使用TUN模式</span><br><span class="line">  --masquerading -m                   指定真实服务器转发工作模式，使用NAT模式</span><br><span class="line">  --weight       -w &lt;权重值&gt;          指定真实服务器的权重值</span><br><span class="line">  --u-threshold  -x &lt;上阀值&gt;          设置转发请求的最大上连接阀值，范围为0~65535，当</span><br><span class="line">                                      当连接数超过指定上限时，LVS则不会转发请求                           </span><br><span class="line">  --l-threshold  -y &lt;下阀值&gt;          设置转发请求的下连接阀值，范围为0~65535，当连接</span><br><span class="line">                                      数降低至指定值时，LVS则继续提供服务，默认值为0</span><br><span class="line">  --mcast-interface interface         设置用于连接同步守护进程的组播接口</span><br><span class="line">  --syncid sid                        设置连接同步守护进程的SID号，用于标识，范围0~255</span><br><span class="line">  --connection   -c                   显示连接信息，一般与<span class="string">"-l"</span>连用</span><br><span class="line">  --timeout                           显示TCP、TCPFIN、UDP超时时间信息，一般与<span class="string">"-l"</span>连用</span><br><span class="line">  --daemon                            显示连接同步守护信息，一般与<span class="string">"-l"</span>连用</span><br><span class="line">  --stats                             显示统计信息，一般与<span class="string">"-l"</span>连用</span><br><span class="line">  --rate                              显示转发速率信息，一般与<span class="string">"-l"</span>连用</span><br><span class="line">  --exact                             显示数据包和字节计数器的确切值，扩大字符长度</span><br><span class="line">  --thresholds                        显示阀值信息，一般与<span class="string">"-l"</span>连用</span><br><span class="line">  --persistent-conn                   显示持久化连接信息，一般与<span class="string">"-l"</span>连用</span><br><span class="line">  --numeric      -n                   地址和端口以数字格式显示，一般与<span class="string">"-l"</span>连用</span><br><span class="line">  --<span class="built_in">sched</span>-flags  -b &lt;标识&gt;            设置调度算法的范围标识，用于SH算法，有两个标识：</span><br><span class="line">                                      sh-fallback，如果真实服务器不可用，则将其转发到</span><br><span class="line">                                      其他真实服务器上。</span><br><span class="line">                                      sh-port,将源地址的端口号也添加到散列键=值中</span><br></pre></td></tr></table></figure></p><h2 id="集群服务管理"><a href="#集群服务管理" class="headerlink" title="集群服务管理"></a>集群服务管理</h2><p>对集群服务条目的增删查改。</p><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ipvsadm -ln</span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line"> -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br></pre></td></tr></table></figure><h3 id="添加一个集群服务"><a href="#添加一个集群服务" class="headerlink" title="添加一个集群服务"></a>添加一个集群服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ipvsadm -A -t 192.168.1.100:80 -s rr</span></span><br><span class="line"><span class="comment"># ipvsadm -ln</span></span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line"> -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  192.168.1.100:80 rr</span><br></pre></td></tr></table></figure><h3 id="修改一个集群服务"><a href="#修改一个集群服务" class="headerlink" title="修改一个集群服务"></a>修改一个集群服务</h3><p>修改集群服务的调度算法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ipvsadm -E -t 192.168.1.100:80 -s wlc</span></span><br><span class="line"><span class="comment"># ipvsadm -ln</span></span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line"> -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  192.168.1.100:80 wlc</span><br></pre></td></tr></table></figure></p><h3 id="删除一个集群服务"><a href="#删除一个集群服务" class="headerlink" title="删除一个集群服务"></a>删除一个集群服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># ipvsadm -D -t 192.168.1.100:80</span><br><span class="line"># ipvsadm -ln</span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line"> -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">为空</span><br></pre></td></tr></table></figure><h3 id="删除所有集群服务"><a href="#删除所有集群服务" class="headerlink" title="删除所有集群服务"></a>删除所有集群服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ipvsadm -C</span><br></pre></td></tr></table></figure><h2 id="真实服务器管理"><a href="#真实服务器管理" class="headerlink" title="真实服务器管理"></a>真实服务器管理</h2><p>对要转发的真实服务器条目的增删查改。绑定集群服务、指定LVS转发的工作模式。</p><h3 id="往集群服务中添加一个真实服务器"><a href="#往集群服务中添加一个真实服务器" class="headerlink" title="往集群服务中添加一个真实服务器"></a>往集群服务中添加一个真实服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># ipvsadm -a -t 192.168.1.100:80 -r 172.16.16.2:80 -m -w 1</span><br><span class="line"># ipvsadm -a -t 192.168.1.100:80 -r 172.16.16.3:80 -m -w 1</span><br><span class="line"># ipvsadm -ln</span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line"> -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  192.168.1.100:80 wlc</span><br><span class="line"> -&gt; 172.16.16.2:80               Masq    1      0          0        </span><br><span class="line"> -&gt; 172.16.16.3:80               Masq    1      0          0</span><br></pre></td></tr></table></figure><h3 id="修改集群服务中的一个真实服务器"><a href="#修改集群服务中的一个真实服务器" class="headerlink" title="修改集群服务中的一个真实服务器"></a>修改集群服务中的一个真实服务器</h3><p>修改集群服务中的一个真实服务器的权重值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># ipvsadm -e -t 192.168.1.100:80 -r 172.16.16.2:80 -m -w 2</span><br><span class="line"># ipvsadm -ln</span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line"> -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  192.168.1.100:80 wlc</span><br><span class="line"> -&gt; 172.16.16.2:80               Masq    2      0          0        </span><br><span class="line"> -&gt; 172.16.16.3:80               Masq    1      0          0</span><br></pre></td></tr></table></figure></p><h3 id="删除集群服务中的一个真实服务器"><a href="#删除集群服务中的一个真实服务器" class="headerlink" title="删除集群服务中的一个真实服务器"></a>删除集群服务中的一个真实服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># ipvsadm -d -t 192.168.1.100:80 -r 172.16.16.2:80</span><br><span class="line"># ipvsadm -ln</span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line"> -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  192.168.1.100:80 wlc</span><br><span class="line"> -&gt; 已被删除</span><br><span class="line"> -&gt; 172.16.16.3:80               Masq    1      0          0</span><br></pre></td></tr></table></figure><h3 id="清空转发请求计数器"><a href="#清空转发请求计数器" class="headerlink" title="清空转发请求计数器"></a>清空转发请求计数器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ipvsadm -Z</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;IPVSADM的使用&quot;&gt;&lt;a href=&quot;#IPVSADM的使用&quot; class=&quot;headerlink&quot; title=&quot;IPVSADM的使用&quot;&gt;&lt;/a&gt;IPVSADM的使用&lt;/h1&gt;&lt;p&gt;ipvsadm是一个工具，同时它也是一条命令，用于管理LVS的策略规则。&lt;/
      
    
    </summary>
    
    
      <category term="lvs" scheme="http://liupeng0518.github.io/categories/lvs/"/>
    
    
      <category term="linux" scheme="http://liupeng0518.github.io/tags/linux/"/>
    
      <category term="ipvs" scheme="http://liupeng0518.github.io/tags/ipvs/"/>
    
      <category term="lvs" scheme="http://liupeng0518.github.io/tags/lvs/"/>
    
  </entry>
  
  <entry>
    <title>bgp</title>
    <link href="http://liupeng0518.github.io/2020/02/10/network/bgp/"/>
    <id>http://liupeng0518.github.io/2020/02/10/network/bgp/</id>
    <published>2020-02-10T09:47:19.000Z</published>
    <updated>2021-06-14T17:19:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h1><p>eve-ng 模拟器来</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;环境介绍&quot;&gt;&lt;a href=&quot;#环境介绍&quot; class=&quot;headerlink&quot; title=&quot;环境介绍&quot;&gt;&lt;/a&gt;环境介绍&lt;/h1&gt;&lt;p&gt;eve-ng 模拟器来&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="network" scheme="http://liupeng0518.github.io/categories/network/"/>
    
    
      <category term="bgp" scheme="http://liupeng0518.github.io/tags/bgp/"/>
    
  </entry>
  
  <entry>
    <title>[转]过渡到nftables</title>
    <link href="http://liupeng0518.github.io/2020/01/09/linux/%E5%AE%89%E5%85%A8/transition-to-nftables/"/>
    <id>http://liupeng0518.github.io/2020/01/09/linux/%E5%AE%89%E5%85%A8/transition-to-nftables/</id>
    <published>2020-01-09T09:47:19.000Z</published>
    <updated>2021-06-14T17:19:06.996Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>开源世界中的每个主要发行版都在演进，逐渐将 nftables 作为了默认防火墙。换言之，古老的 iptables 现在已经消亡。本文是有关如何构建 nftables 的教程。</p></blockquote><p>当前，有一个与 nftables 兼容的 iptables-nft 后端，但是很快，即使是它也不再提供了。另外，正如 Red Hat 开发人员所指出的那样，有时它可能会错误地转换规则。我们需要知道如何构建自己的 nftables，而不是依赖于 iptables 到 nftables 的转换器。</p><p>在 nftables 中，所有地址族都遵循一个规则。与 iptables 不同，nftables 在用户空间中运行，iptables 中的每个模块都运行在内核（空间）中。它很少需要更新内核，并带有一些新功能，例如映射、地址族和字典。</p><h3 id="地址族"><a href="#地址族" class="headerlink" title="地址族"></a>地址族</h3><p>地址族确定要处理的数据包的类型。在 nftables 中有六个地址族，它们是：</p><ul><li>ip</li><li>ipv6</li><li>inet</li><li>arp</li><li>bridge</li><li>netdev</li></ul><p>在 nftables 中，ipv4 和 ipv6 协议可以被合并为一个称为 inet 的单一地址族。因此，我们不需要指定两个规则：一个用于 ipv4，另一个用于 ipv6。如果未指定地址族，它将默认为 ip 协议，即 ipv4。我们感兴趣的领域是 inet 地址族，因为大多数家庭用户将使用 ipv4 或 ipv6 协议。</p><h3 id="nftables"><a href="#nftables" class="headerlink" title="nftables"></a>nftables</h3><p>典型的 nftables 规则包含三个部分：表、链和规则。</p><p>表是链和规则的容器。它们由其地址族和名称来标识。链包含 inet/arp/bridge/netdev 等协议所需的规则，并具有三种类型：过滤器、NAT 和路由。nftables 规则可以从脚本加载，也可以在终端键入，然后另存为规则集。</p><p>对于家庭用户，默认链为过滤器。inet 系列包含以下钩子：</p><ul><li>Input</li><li>Output</li><li>Forward</li><li>Pre-routing</li><li>Post-routing</li></ul><h3 id="使用脚本还是不用？"><a href="#使用脚本还是不用？" class="headerlink" title="使用脚本还是不用？"></a>使用脚本还是不用？</h3><p>最大的问题之一是我们是否可以使用防火墙脚本。答案是：这是你自己的选择。这里有一些建议：如果防火墙中有数百条规则，那么最好使用脚本，但是如果你是典型的家庭用户，则可以在终端中键入命令，然后（保存并在重启时）加载规则集。每种选择都有其自身的优缺点。在本文中，我们将在终端中键入它们以构建防火墙。</p><p>nftables 使用一个名为 <code>nft</code> 的程序来添加、创建、列出、删除和加载规则。确保使用以下命令将 nftables 与 conntrackd 和 netfilter-persistent 软件包一起安装，并删除 iptables：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install nftables conntrackd netfilter-persistent</span><br><span class="line">apt-get purge iptables</span><br></pre></td></tr></table></figure><p><code>nft</code> 需要以 root 身份运行或使用 <code>sudo</code> 运行。使用以下命令分别列出、刷新、删除规则集和加载脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nft list ruleset</span><br><span class="line">nft flush ruleset</span><br><span class="line">nft delete table inet filter</span><br><span class="line">/usr/sbin/nft -f /etc/nftables.conf</span><br></pre></td></tr></table></figure><h3 id="输入策略"><a href="#输入策略" class="headerlink" title="输入策略"></a>输入策略</h3><p>就像 iptables 一样，防火墙将包含三部分：输入（<code>input</code>）、转发（<code>forward</code>）和输出（<code>output</code>）。在终端中，为输入（<code>input</code>）策略键入以下命令。在开始之前，请确保已刷新规则集。我们的默认策略将会删除所有内容。我们将在防火墙中使用 inet 地址族。将以下规则以 root 身份添加或使用 <code>sudo</code> 运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nft add table inet filter</span><br><span class="line">nft add chain inet filter input &#123; type filter hook input priority 0 \; counter \; policy drop \; &#125;</span><br></pre></td></tr></table></figure><p>你会注意到有一个名为 <code>priority 0</code> 的东西。这意味着赋予该规则更高的优先级。挂钩通常赋予负整数，这意味着更高的优先级。每个挂钩都有自己的优先级，过滤器链的优先级为 0。你可以检查 nftables Wiki 页面以查看每个挂钩的优先级。</p><p>要了解你计算机中的网络接口，请运行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip link show</span><br></pre></td></tr></table></figure><p>它将显示已安装的网络接口，一个是本地主机、另一个是以太网端口或无线端口。以太网端口的名称如下所示：<code>enpXsY</code>，其中 <code>X</code> 和 <code>Y</code> 是数字，无线端口也是如此。我们必须允许本地主机的流量，并且仅允许从互联网建立的传入连接。</p><p>nftables 具有一项称为裁决语句的功能，用于解析规则。裁决语句为 <code>accept</code>、<code>drop</code>、<code>queue</code>、<code>jump</code>、<code>goto</code>、<code>continue</code> 和 <code>return</code>。由于这是一个很简单的防火墙，因此我们将使用 <code>accept</code> 或 <code>drop</code> 处理数据包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nft add rule inet filter input iifname lo accept</span><br><span class="line">nft add rule inet filter input iifname enpXsY ct state new, established, related accept</span><br></pre></td></tr></table></figure><p>接下来，我们必须添加规则以保护我们免受隐秘扫描。并非所有的隐秘扫描都是恶意的，但大多数都是。我们必须保护网络免受此类扫描。第一组规则列出了要测试的 TCP 标志。在这些标志中，第二组列出了要与第一组匹配的标志。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nft add rule inet filter input iifname enpXsY tcp flags \&amp; \(syn\|fin\) == \(syn\|fin\) drop</span><br><span class="line">nft add rule inet filter input iifname enpXsY tcp flags \&amp; \(syn\|rst\) == \(syn\|rst\) drop</span><br><span class="line">nft add rule inet filter input iifname enpXsY tcp flags \&amp; \(fin\|rst\) == \(fin\|rst\) drop</span><br><span class="line">nft add rule inet filter input iifname enpXsY tcp flags \&amp; \(ack\|fin\) == fin drop</span><br><span class="line">nft add rule inet filter input iifname enpXsY tcp flags \&amp; \(ack\|psh\) == psh drop</span><br><span class="line">nft add rule inet filter input iifname enpXsY tcp flags \&amp; \(ack\|urg\) == urg drop</span><br></pre></td></tr></table></figure><p>记住，我们在终端中键入这些命令。因此，我们必须在一些特殊字符之前添加一个反斜杠，以确保终端能够正确解释该斜杠。如果你使用的是脚本，则不需要这样做。</p><h3 id="关于-ICMP-的警告"><a href="#关于-ICMP-的警告" class="headerlink" title="关于 ICMP 的警告"></a>关于 ICMP 的警告</h3><p>互联网控制消息协议（ICMP）是一种诊断工具，因此不应完全丢弃该流量。完全阻止 ICMP 的任何尝试都是不明智的，因为它还会导致停止向我们提供错误消息。仅启用最重要的控制消息，例如回声请求、回声应答、目的地不可达和超时等消息，并拒绝其余消息。回声请求和回声应答是 <code>ping</code> 的一部分。在输入策略中，我们仅允许回声应答、而在输出策略中，我们仅允许回声请求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nft add rule inet filter input iifname enpXsY icmp type &#123; echo-reply, destination-unreachable, time-exceeded &#125; limit rate 1/second accept</span><br><span class="line">nft add rule inet filter input iifname enpXsY ip protocol icmp drop</span><br></pre></td></tr></table></figure><p>最后，我们记录并丢弃所有无效数据包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nft add rule inet filter input iifname enpXsY ct state invalid log flags all level info prefix \”Invalid-Input: \”</span><br><span class="line">nft add rule inet filter input iifname enpXsY ct state invalid drop</span><br></pre></td></tr></table></figure><h3 id="转发和输出策略"><a href="#转发和输出策略" class="headerlink" title="转发和输出策略"></a>转发和输出策略</h3><p>在转发和输出策略中，默认情况下我们将丢弃数据包，仅接受已建立连接的数据包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nft add chain inet filter forward &#123; type filter hook forward priority 0 \; counter \; policy drop \; &#125;</span><br><span class="line">nft add rule inet filter forward ct state established, related accept</span><br><span class="line">nft add rule inet filter forward ct state invalid drop</span><br><span class="line">nft add chain inet filter output &#123; type filter hook output priority 0 \; counter \; policy drop \; &#125;</span><br></pre></td></tr></table></figure><p>典型的桌面用户只需要端口 80 和 443 即可访问互联网。最后，允许可接受的 ICMP 协议并在记录无效数据包时丢弃它们。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nft add rule inet filter output oifname enpXsY tcp dport &#123; 80, 443 &#125; ct state established accept</span><br><span class="line">nft add rule inet filter output oifname enpXsY icmp type &#123; echo-request, destination-unreachable, time-exceeded &#125; limit rate 1/second accept</span><br><span class="line">nft add rule inet filter output oifname enpXsY ip protocol icmp drop</span><br><span class="line">nft add rule inet filter output oifname enpXsY ct state invalid log flags all level info prefix \”Invalid-Output: \”</span><br><span class="line">nft add rule inet filter output oifname enpXsY ct state invalid drop</span><br></pre></td></tr></table></figure><p>现在我们必须保存我们的规则集，否则重新启动时它将丢失。为此，请运行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nft list ruleset. &gt; /etc/nftables.conf</span><br></pre></td></tr></table></figure><p>我们须在引导时加载 nftables，以下将在 systemd 中启用 nftables 服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable nftables</span><br></pre></td></tr></table></figure><p>接下来，编辑 nftables 单元文件以删除 <code>Execstop</code> 选项，以避免在每次引导时刷新规则集。该文件通常位于 <code>/etc/systemd/system/sysinit.target.wants/nftables.service</code>。现在重新启动nftables：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nftables</span><br></pre></td></tr></table></figure><h3 id="在-rsyslog-中记录日志"><a href="#在-rsyslog-中记录日志" class="headerlink" title="在 rsyslog 中记录日志"></a>在 rsyslog 中记录日志</h3><p>当你记录丢弃的数据包时，它们直接进入 syslog，这使得读取该日志文件非常困难。最好将防火墙日志重定向到单独的文件。在 <code>/var/log</code> 目录中创建一个名为 <code>nftables</code> 的目录，并在其中创建两个名为 <code>input.log</code> 和 <code>output.log</code> 的文件，分别存储输入和输出日志。确保系统中已安装 rsyslog。现在转到 <code>/etc/rsyslog.d</code> 并创建一个名为 <code>nftables.conf</code> 的文件，其内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:msg,regex,”Invalid-Input: “ -/var/log/nftables/Input.log</span><br><span class="line">:msg,regex,”Invalid-Output: “ -/var/log/nftables/Output.log &amp; stop</span><br></pre></td></tr></table></figure><p>现在，我们必须确保日志是可管理的。为此，使用以下代码在 <code>/etc/logrotate.d</code> 中创建另一个名为 <code>nftables</code> 的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/log/nftables/* &#123; rotate 5 daily maxsize 50M missingok notifempty delaycompress compress postrotate invoke-rc.d rsyslog rotate &gt; /dev/null endscript &#125;</span><br></pre></td></tr></table></figure><p>重新启动 nftables。现在，你可以检查你的规则集。如果你觉得在终端中键入每个命令很麻烦，则可以使用脚本来加载 nftables 防火墙。我希望本文对保护你的系统有用。</p><hr><p>via: <a href="https://opensourceforu.com/2019/10/transition-to-nftables/" target="_blank" rel="noopener">https://opensourceforu.com/2019/10/transition-to-nftables/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;开源世界中的每个主要发行版都在演进，逐渐将 nftables 作为了默认防火墙。换言之，古老的 iptables 现在已经消亡。本文是有关如何构建 nftables 的教程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当前，有一个与 nftable
      
    
    </summary>
    
    
      <category term="linux" scheme="http://liupeng0518.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://liupeng0518.github.io/tags/linux/"/>
    
      <category term="nftables" scheme="http://liupeng0518.github.io/tags/nftables/"/>
    
  </entry>
  
  <entry>
    <title>Netfilter</title>
    <link href="http://liupeng0518.github.io/2020/01/09/linux/%E5%AE%89%E5%85%A8/Netfilter/"/>
    <id>http://liupeng0518.github.io/2020/01/09/linux/%E5%AE%89%E5%85%A8/Netfilter/</id>
    <published>2020-01-09T09:47:19.000Z</published>
    <updated>2021-06-14T17:19:06.996Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="linux" scheme="http://liupeng0518.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://liupeng0518.github.io/tags/linux/"/>
    
      <category term="netfilter" scheme="http://liupeng0518.github.io/tags/netfilter/"/>
    
  </entry>
  
  <entry>
    <title>nftables</title>
    <link href="http://liupeng0518.github.io/2020/01/09/linux/%E5%AE%89%E5%85%A8/nftables/"/>
    <id>http://liupeng0518.github.io/2020/01/09/linux/%E5%AE%89%E5%85%A8/nftables/</id>
    <published>2020-01-09T09:47:19.000Z</published>
    <updated>2021-06-14T17:19:06.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><a href="https://www.netfilter.org/projects/nftables/index.html" target="_blank" rel="noopener">nftables</a> 已经是centos 8/debian buster以上版本默认配置。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h2 id="版本切换"><a href="#版本切换" class="headerlink" title="版本切换"></a>版本切换</h2><p><a href="https://wiki.debian.org/nftables#Current_status" target="_blank" rel="noopener">https://wiki.debian.org/nftables#Current_status</a></p><p>The default starting with Debian Buster:(默认 nftables)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">update-alternatives --set iptables /usr/sbin/iptables-nft</span><br><span class="line">update-alternatives --set ip6tables /usr/sbin/ip6tables-nft</span><br><span class="line">update-alternatives --set arptables /usr/sbin/arptables-nft</span><br><span class="line">update-alternatives --set ebtables /usr/sbin/ebtables-nft</span><br></pre></td></tr></table></figure><p>Switching to the legacy version:(切换到 iptables)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">update-alternatives --set iptables /usr/sbin/iptables-legacy</span><br><span class="line">update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy</span><br><span class="line">update-alternatives --set arptables /usr/sbin/arptables-legacy</span><br><span class="line">update-alternatives --set ebtables /usr/sbin/ebtables-legacy</span><br></pre></td></tr></table></figure><h2 id="转换-翻译"><a href="#转换-翻译" class="headerlink" title="转换/翻译"></a>转换/翻译</h2><p>直接翻译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables-translate -A INPUT -p tcp --dport 22 -m conntrack --ctstate NEW -j ACCEPT</span><br><span class="line"># nft add rule ip filter INPUT tcp dport 22 ct state new counter accept</span><br></pre></td></tr></table></figure></p><p>文件翻译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables-save &gt; rules.v4    #导出 iptables 到文件 rules.v4</span><br><span class="line">iptables-restore-translate -f rules.v4 &gt;rules.nft    #翻译 rules.v4 到文件 rules.nft</span><br><span class="line">nft -f rules.nft    #nftables 启用新规则</span><br><span class="line">nft list ruleset    #查看当前规则列表</span><br></pre></td></tr></table></figure></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>k8s 在部署的时候可能会遇到问题：<br><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/#ensure-iptables-tooling-does-not-use-the-nftables-backend" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/#ensure-iptables-tooling-does-not-use-the-nftables-backend</a></p><p>calico 高版本支持nft模式，低版本会遇到问题：<br><a href="https://github.com/projectcalico/calico/issues/2322" target="_blank" rel="noopener">https://github.com/projectcalico/calico/issues/2322</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://access.redhat.com/solutions/42655" target="_blank" rel="noopener">https://access.redhat.com/solutions/42655</a></p><p><a href="https://wiki.shileizcc.com/confluence/display/firewall/nftables" target="_blank" rel="noopener">https://wiki.shileizcc.com/confluence/display/firewall/nftables</a></p><p><a href="https://ghost.qinan.co/debian10_iptables_to_nftables/" target="_blank" rel="noopener">https://ghost.qinan.co/debian10_iptables_to_nftables/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.netfilter.org/projects/nftables/index.html&quot; targe
      
    
    </summary>
    
    
      <category term="linux" scheme="http://liupeng0518.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://liupeng0518.github.io/tags/linux/"/>
    
      <category term="nftables" scheme="http://liupeng0518.github.io/tags/nftables/"/>
    
  </entry>
  
  <entry>
    <title>源码编译docker-ce</title>
    <link href="http://liupeng0518.github.io/2020/01/09/docker/build/build%20docker%20bin/"/>
    <id>http://liupeng0518.github.io/2020/01/09/docker/build/build%20docker%20bin/</id>
    <published>2020-01-09T09:47:19.000Z</published>
    <updated>2021-06-14T17:19:06.956Z</updated>
    
    <content type="html"><![CDATA[<p>目前需要在mips64el 3B4000 下适配编译<code>UOS 20</code>的<code>docker-ce 18.09/18.06</code>版本。</p><p>这里记录下18.06的编译，09如法炮制：</p><h1 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h1><ul><li>OS: UOS 20</li><li>ARCH: mips64el</li><li>go: 1.12.5</li></ul><h1 id="containerd"><a href="#containerd" class="headerlink" title="containerd"></a>containerd</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"> Makefile.linux                                     |   2 +-</span><br><span class="line"> cmd/ctr/commands/signal_map_linux.go               |   1 -</span><br><span class="line"> vendor/github.com/boltdb/bolt/bolt_mips64le.go     |  12 +++</span><br><span class="line"> .../continuity/sysx/xattr_linux_mips64le.go        | 112 +++++++++++++++++++++</span><br><span class="line"> .../docker/docker/pkg/signal/signal_linux.go       |   1 -</span><br><span class="line"> .../docker/docker/pkg/system/stat_linux.go         |   2 +-</span><br><span class="line"> .../runc/libcontainer/devices/devices.go           |   2 +-</span><br><span class="line"> 7 files changed, 127 insertions(+), 5 deletions(-)</span><br><span class="line"> create mode 100644 vendor/github.com/boltdb/bolt/bolt_mips64le.go</span><br><span class="line"> create mode 100644 vendor/github.com/containerd/continuity/sysx/xattr_linux_mips64le.go</span><br><span class="line"></span><br><span class="line">diff --git a/Makefile.linux b/Makefile.linux</span><br><span class="line">index 23dffad..58f8bc2 100644</span><br><span class="line">--- a/Makefile.linux</span><br><span class="line">+++ b/Makefile.linux</span><br><span class="line">@@ -18,7 +18,7 @@ COMMANDS += containerd-shim</span><br><span class="line"> </span><br><span class="line"> # check GOOS for cross compile builds</span><br><span class="line"> ifeq ($(GOOS),linux)</span><br><span class="line">-GO_GCFLAGS += -buildmode=pie</span><br><span class="line">+GO_GCFLAGS +=</span><br><span class="line"> endif</span><br><span class="line"> </span><br><span class="line"> # amd64 supports go test -race</span><br><span class="line">diff --git a/cmd/ctr/commands/signal_map_linux.go b/cmd/ctr/commands/signal_map_linux.go</span><br><span class="line">index 11799ea..728099a 100644</span><br><span class="line">--- a/cmd/ctr/commands/signal_map_linux.go</span><br><span class="line">+++ b/cmd/ctr/commands/signal_map_linux.go</span><br><span class="line">@@ -42,7 +42,6 @@ var signalMap = map[string]syscall.Signal&#123;</span><br><span class="line"> &quot;PWR&quot;:    unix.SIGPWR,</span><br><span class="line"> &quot;QUIT&quot;:   unix.SIGQUIT,</span><br><span class="line"> &quot;SEGV&quot;:   unix.SIGSEGV,</span><br><span class="line">-&quot;STKFLT&quot;: unix.SIGSTKFLT,</span><br><span class="line"> &quot;STOP&quot;:   unix.SIGSTOP,</span><br><span class="line"> &quot;SYS&quot;:    unix.SIGSYS,</span><br><span class="line"> &quot;TERM&quot;:   unix.SIGTERM,</span><br><span class="line">diff --git a/vendor/github.com/boltdb/bolt/bolt_mips64le.go b/vendor/github.com/boltdb/bolt/bolt_mips64le.go</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..a46a9de</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/vendor/github.com/boltdb/bolt/bolt_mips64le.go</span><br><span class="line">@@ -0,0 +1,12 @@</span><br><span class="line">+// +build mips64le</span><br><span class="line">+</span><br><span class="line">+package bolt</span><br><span class="line">+</span><br><span class="line">+// maxMapSize represents the largest mmap size supported by Bolt.</span><br><span class="line">+const maxMapSize = 0xFFFFFFFFFFFF // 256TB</span><br><span class="line">+</span><br><span class="line">+// maxAllocSize is the size used when creating array pointers.</span><br><span class="line">+const maxAllocSize = 0x7FFFFFFF</span><br><span class="line">+</span><br><span class="line">+// Are unaligned load/stores broken on this arch?</span><br><span class="line">+var brokenUnaligned = false</span><br><span class="line">diff --git a/vendor/github.com/containerd/continuity/sysx/xattr_linux_mips64le.go b/vendor/github.com/containerd/continuity/sysx/xattr_linux_mips64le.go</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..240ccf9</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/vendor/github.com/containerd/continuity/sysx/xattr_linux_mips64le.go</span><br><span class="line">@@ -0,0 +1,112 @@</span><br><span class="line">+// mksyscall.pl xattr_linux.go</span><br><span class="line">+// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT</span><br><span class="line">+</span><br><span class="line">+package sysx</span><br><span class="line">+</span><br><span class="line">+import (</span><br><span class="line">+       &quot;syscall&quot;</span><br><span class="line">+       &quot;unsafe&quot;</span><br><span class="line">+)</span><br><span class="line">+</span><br><span class="line">+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span><br><span class="line">+</span><br><span class="line">+func llistxattr(path string, dest []byte) (sz int, err error) &#123;</span><br><span class="line">+       var _p0 *byte</span><br><span class="line">+       _p0, err = syscall.BytePtrFromString(path)</span><br><span class="line">+       if err != nil &#123;</span><br><span class="line">+               return</span><br><span class="line">+       &#125;</span><br><span class="line">+       var _p1 unsafe.Pointer</span><br><span class="line">+       if len(dest) &gt; 0 &#123;</span><br><span class="line">+               _p1 = unsafe.Pointer(&amp;dest[0])</span><br><span class="line">+       &#125; else &#123;</span><br><span class="line">+               _p1 = unsafe.Pointer(&amp;_zero)</span><br><span class="line">+       &#125;</span><br><span class="line">+       r0, _, e1 := syscall.Syscall(syscall.SYS_LLISTXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(dest)))</span><br><span class="line">+       use(unsafe.Pointer(_p0))</span><br><span class="line">+       sz = int(r0)</span><br><span class="line">+       if e1 != 0 &#123;</span><br><span class="line">+               err = errnoErr(e1)</span><br><span class="line">+       &#125;</span><br><span class="line">+       return</span><br><span class="line">+&#125;</span><br><span class="line">+</span><br><span class="line">+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span><br><span class="line">+</span><br><span class="line">+func lremovexattr(path string, attr string) (err error) &#123;</span><br><span class="line">+       var _p0 *byte</span><br><span class="line">+       _p0, err = syscall.BytePtrFromString(path)</span><br><span class="line">+       if err != nil &#123;</span><br><span class="line">+               return</span><br><span class="line">+       &#125;</span><br><span class="line">+       var _p1 *byte</span><br><span class="line">+       _p1, err = syscall.BytePtrFromString(attr)</span><br><span class="line">+       if err != nil &#123;</span><br><span class="line">+               return</span><br><span class="line">+       &#125;</span><br><span class="line">+       _, _, e1 := syscall.Syscall(syscall.SYS_LREMOVEXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0)</span><br><span class="line">+       use(unsafe.Pointer(_p0))</span><br><span class="line">+       use(unsafe.Pointer(_p1))</span><br><span class="line">+       if e1 != 0 &#123;</span><br><span class="line">+               err = errnoErr(e1)</span><br><span class="line">+       &#125;</span><br><span class="line">+       return</span><br><span class="line">+&#125;</span><br><span class="line">+</span><br><span class="line">+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span><br><span class="line">+</span><br><span class="line">+func lsetxattr(path string, attr string, data []byte, flags int) (err error) &#123;</span><br><span class="line">+       var _p0 *byte</span><br><span class="line">+       _p0, err = syscall.BytePtrFromString(path)</span><br><span class="line">+       if err != nil &#123;</span><br><span class="line">+               return</span><br><span class="line">+       &#125;</span><br><span class="line">+       var _p1 *byte</span><br><span class="line">+       _p1, err = syscall.BytePtrFromString(attr)</span><br><span class="line">+       if err != nil &#123;</span><br><span class="line">+               return</span><br><span class="line">+       &#125;</span><br><span class="line">+       var _p2 unsafe.Pointer</span><br><span class="line">+       if len(data) &gt; 0 &#123;</span><br><span class="line">+               _p2 = unsafe.Pointer(&amp;data[0])</span><br><span class="line">+       &#125; else &#123;</span><br><span class="line">+               _p2 = unsafe.Pointer(&amp;_zero)</span><br><span class="line">+       &#125;</span><br><span class="line">+       _, _, e1 := syscall.Syscall6(syscall.SYS_LSETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(data)), uintptr(flags), 0)</span><br><span class="line">+       use(unsafe.Pointer(_p0))</span><br><span class="line">+       use(unsafe.Pointer(_p1))</span><br><span class="line">+       if e1 != 0 &#123;</span><br><span class="line">+               err = errnoErr(e1)</span><br><span class="line">+       &#125;</span><br><span class="line">+       return</span><br><span class="line">+&#125;</span><br><span class="line">+</span><br><span class="line">+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span><br><span class="line">+</span><br><span class="line">+func lgetxattr(path string, attr string, dest []byte) (sz int, err error) &#123;</span><br><span class="line">+       var _p0 *byte</span><br><span class="line">+       _p0, err = syscall.BytePtrFromString(path)</span><br><span class="line">+       if err != nil &#123;</span><br><span class="line">+               return</span><br><span class="line">+       &#125;</span><br><span class="line">+       var _p1 *byte</span><br><span class="line">+       _p1, err = syscall.BytePtrFromString(attr)</span><br><span class="line">+       if err != nil &#123;</span><br><span class="line">+               return</span><br><span class="line">+       &#125;</span><br><span class="line">+       var _p2 unsafe.Pointer</span><br><span class="line">+       if len(dest) &gt; 0 &#123;</span><br><span class="line">+               _p2 = unsafe.Pointer(&amp;dest[0])</span><br><span class="line">+       &#125; else &#123;</span><br><span class="line">+               _p2 = unsafe.Pointer(&amp;_zero)</span><br><span class="line">+       &#125;</span><br><span class="line">+       r0, _, e1 := syscall.Syscall6(syscall.SYS_LGETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(dest)), 0, 0)</span><br><span class="line">+       use(unsafe.Pointer(_p0))</span><br><span class="line">+       use(unsafe.Pointer(_p1))</span><br><span class="line">+       sz = int(r0)</span><br><span class="line">+       if e1 != 0 &#123;</span><br><span class="line">+               err = errnoErr(e1)</span><br><span class="line">+       &#125;</span><br><span class="line">+       return</span><br><span class="line">+&#125;</span><br><span class="line">+</span><br><span class="line">diff --git a/vendor/github.com/docker/docker/pkg/signal/signal_linux.go b/vendor/github.com/docker/docker/pkg/signal/signal_linux.go</span><br><span class="line">index 66c85c8..4987aca 100644</span><br><span class="line">--- a/vendor/github.com/docker/docker/pkg/signal/signal_linux.go</span><br><span class="line">+++ b/vendor/github.com/docker/docker/pkg/signal/signal_linux.go</span><br><span class="line">@@ -32,7 +32,6 @@ var SignalMap = map[string]syscall.Signal&#123;</span><br><span class="line"> &quot;PWR&quot;:      unix.SIGPWR,</span><br><span class="line"> &quot;QUIT&quot;:     unix.SIGQUIT,</span><br><span class="line"> &quot;SEGV&quot;:     unix.SIGSEGV,</span><br><span class="line">-&quot;STKFLT&quot;:   unix.SIGSTKFLT,</span><br><span class="line"> &quot;STOP&quot;:     unix.SIGSTOP,</span><br><span class="line"> &quot;SYS&quot;:      unix.SIGSYS,</span><br><span class="line"> &quot;TERM&quot;:     unix.SIGTERM,</span><br><span class="line">diff --git a/vendor/github.com/docker/docker/pkg/system/stat_linux.go b/vendor/github.com/docker/docker/pkg/system/stat_linux.go</span><br><span class="line">index 1939f95..af7af20 100644</span><br><span class="line">--- a/vendor/github.com/docker/docker/pkg/system/stat_linux.go</span><br><span class="line">+++ b/vendor/github.com/docker/docker/pkg/system/stat_linux.go</span><br><span class="line">@@ -8,7 +8,7 @@ func fromStatT(s *syscall.Stat_t) (*StatT, error) &#123;</span><br><span class="line"> mode: s.Mode,</span><br><span class="line"> uid:  s.Uid,</span><br><span class="line"> gid:  s.Gid,</span><br><span class="line">-rdev: s.Rdev,</span><br><span class="line">+rdev: uint64(s.Rdev),</span><br><span class="line"> mtim: s.Mtim&#125;, nil</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">diff --git a/vendor/github.com/opencontainers/runc/libcontainer/devices/devices.go b/vendor/github.com/opencontainers/runc/libcontainer/devices/devices.go</span><br><span class="line">index 3619258..3079ffd 100644</span><br><span class="line">--- a/vendor/github.com/opencontainers/runc/libcontainer/devices/devices.go</span><br><span class="line">+++ b/vendor/github.com/opencontainers/runc/libcontainer/devices/devices.go</span><br><span class="line">@@ -30,7 +30,7 @@ func DeviceFromPath(path, permissions string) (*configs.Device, error) &#123;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> var (</span><br><span class="line">-devNumber = stat.Rdev</span><br><span class="line">+devNumber = uint64(stat.Rdev)</span><br><span class="line"> major     = unix.Major(devNumber)</span><br><span class="line"> )</span><br><span class="line"> if major == 0 &#123;</span><br><span class="line">--</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"> vendor/golang.org/x/sys/unix/ztypes_linux_mips64le.go | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br><span class="line">diff --git a/vendor/golang.org/x/sys/unix/ztypes_linux_mips64le.go b/vendor/golang.org/x/sys/unix/ztypes_linux_mips64le.go</span><br><span class="line">index bbe08d7..48798cc 100644</span><br><span class="line">--- a/vendor/golang.org/x/sys/unix/ztypes_linux_mips64le.go</span><br><span class="line">+++ b/vendor/golang.org/x/sys/unix/ztypes_linux_mips64le.go</span><br><span class="line">@@ -637,6 +637,7 @@ type Ustat_t struct &#123;</span><br><span class="line"> </span><br><span class="line"> type EpollEvent struct &#123;</span><br><span class="line"> Events uint32</span><br><span class="line">+PadFd  int32</span><br><span class="line"> Fd     int32</span><br><span class="line"> Pad    int32</span><br><span class="line"> &#125;</span><br><span class="line">--</span><br></pre></td></tr></table></figure><h1 id="libnetwork"><a href="#libnetwork" class="headerlink" title="libnetwork"></a>libnetwork</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"> vendor/golang.org/x/sys/unix/ztypes_linux_mips64.go | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br><span class="line">diff --git a/vendor/golang.org/x/sys/unix/ztypes_linux_mips64.go b/vendor/golang.org/x/sys/unix/ztypes_linux_mips64.go</span><br><span class="line">index 01e8f65..5539bec 100644</span><br><span class="line">--- a/vendor/golang.org/x/sys/unix/ztypes_linux_mips64.go</span><br><span class="line">+++ b/vendor/golang.org/x/sys/unix/ztypes_linux_mips64.go</span><br><span class="line">@@ -677,6 +677,7 @@ type Ustat_t struct &#123;</span><br><span class="line"> </span><br><span class="line"> type EpollEvent struct &#123;</span><br><span class="line"> Events uint32</span><br><span class="line">+PadFd  int32</span><br><span class="line"> Fd     int32</span><br><span class="line"> Pad    int32</span><br><span class="line"> &#125;</span><br><span class="line">--</span><br></pre></td></tr></table></figure><h1 id="runc"><a href="#runc" class="headerlink" title="runc"></a>runc</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"> vendor/golang.org/x/sys/unix/ztypes_linux_mips64le.go | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br><span class="line">diff --git a/vendor/golang.org/x/sys/unix/ztypes_linux_mips64le.go b/vendor/golang.org/x/sys/unix/ztypes_linux_mips64le.go</span><br><span class="line">index f9bd1ab..19bdb3f 100644</span><br><span class="line">--- a/vendor/golang.org/x/sys/unix/ztypes_linux_mips64le.go</span><br><span class="line">+++ b/vendor/golang.org/x/sys/unix/ztypes_linux_mips64le.go</span><br><span class="line">@@ -637,6 +637,7 @@ type Ustat_t struct &#123;</span><br><span class="line"> </span><br><span class="line"> type EpollEvent struct &#123;</span><br><span class="line"> Events uint32</span><br><span class="line">+PadFd  int32</span><br><span class="line"> Fd     int32</span><br><span class="line"> Pad    int32</span><br><span class="line"> &#125;</span><br><span class="line">--</span><br></pre></td></tr></table></figure><h1 id="dockerd-cli"><a href="#dockerd-cli" class="headerlink" title="dockerd/cli"></a>dockerd/cli</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"> .../docker/docker/pkg/signal/signal_linux.go       |   1 -</span><br><span class="line"> .../docker/docker/pkg/system/stat_linux.go         |   2 +-</span><br><span class="line"> .../golang.org/x/sys/unix/ztypes_linux_mips64le.go |   1 +</span><br><span class="line"> engine/daemon/graphdriver/copy/copy.go             |   2 +-</span><br><span class="line"> engine/daemon/graphdriver/devmapper/deviceset.go   |   4 +-</span><br><span class="line"> .../hack/dockerfile/install/containerd.installer   |  13 +--</span><br><span class="line"> engine/hack/dockerfile/install/install.sh          |   2 +-</span><br><span class="line"> engine/hack/dockerfile/install/proxy.installer     |   7 +-</span><br><span class="line"> engine/hack/dockerfile/install/runc.installer      |   8 +-</span><br><span class="line"> engine/hack/dockerfile/install/tini.installer      |   6 +-</span><br><span class="line"> engine/hack/make/.binary                           |   6 +-</span><br><span class="line"> engine/pkg/loopback/loopback.go                    |   2 +-</span><br><span class="line"> engine/pkg/signal/signal_linux.go                  |   1 -</span><br><span class="line"> engine/pkg/system/stat_linux.go                    |   2 +-</span><br><span class="line"> .../vendor/github.com/boltdb/bolt/bolt_mips64le.go |  13 +++</span><br><span class="line"> .../continuity/sysx/xattr_linux_mips64le.go        | 112 +++++++++++++++++++++</span><br><span class="line"> .../runc/libcontainer/devices/devices.go           |   2 +-</span><br><span class="line"> .../vishvananda/netns/netns_linux_mips64le.go      |   8 ++</span><br><span class="line"> .../golang.org/x/sys/unix/ztypes_linux_mips64le.go |   1 +</span><br><span class="line"> 19 files changed, 165 insertions(+), 28 deletions(-)</span><br><span class="line"> create mode 100644 engine/vendor/github.com/boltdb/bolt/bolt_mips64le.go</span><br><span class="line"> create mode 100644 engine/vendor/github.com/containerd/continuity/sysx/xattr_linux_mips64le.go</span><br><span class="line"> create mode 100644 engine/vendor/github.com/vishvananda/netns/netns_linux_mips64le.go</span><br><span class="line"></span><br><span class="line">diff --git a/cli/vendor/github.com/docker/docker/pkg/signal/signal_linux.go b/cli/vendor/github.com/docker/docker/pkg/signal/signal_linux.go</span><br><span class="line">index caed97c..c9bab45 100644</span><br><span class="line">--- a/cli/vendor/github.com/docker/docker/pkg/signal/signal_linux.go</span><br><span class="line">+++ b/cli/vendor/github.com/docker/docker/pkg/signal/signal_linux.go</span><br><span class="line">@@ -32,7 +32,6 @@ var SignalMap = map[string]syscall.Signal&#123;</span><br><span class="line"> "PWR":      unix.SIGPWR,</span><br><span class="line"> "QUIT":     unix.SIGQUIT,</span><br><span class="line"> "SEGV":     unix.SIGSEGV,</span><br><span class="line">-"STKFLT":   unix.SIGSTKFLT,</span><br><span class="line"> "STOP":     unix.SIGSTOP,</span><br><span class="line"> "SYS":      unix.SIGSYS,</span><br><span class="line"> "TERM":     unix.SIGTERM,</span><br><span class="line">diff --git a/cli/vendor/github.com/docker/docker/pkg/system/stat_linux.go b/cli/vendor/github.com/docker/docker/pkg/system/stat_linux.go</span><br><span class="line">index 98c9eb1..8a090a5 100644</span><br><span class="line">--- a/cli/vendor/github.com/docker/docker/pkg/system/stat_linux.go</span><br><span class="line">+++ b/cli/vendor/github.com/docker/docker/pkg/system/stat_linux.go</span><br><span class="line">@@ -8,7 +8,7 @@ func fromStatT(s *syscall.Stat_t) (*StatT, error) &#123;</span><br><span class="line"> mode: s.Mode,</span><br><span class="line"> uid:  s.Uid,</span><br><span class="line"> gid:  s.Gid,</span><br><span class="line">-rdev: s.Rdev,</span><br><span class="line">+rdev: uint64(s.Rdev),</span><br><span class="line"> mtim: s.Mtim&#125;, nil</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">diff --git a/cli/vendor/golang.org/x/sys/unix/ztypes_linux_mips64le.go b/cli/vendor/golang.org/x/sys/unix/ztypes_linux_mips64le.go</span><br><span class="line">index 6f9452d..0b279cc 100644</span><br><span class="line">--- a/cli/vendor/golang.org/x/sys/unix/ztypes_linux_mips64le.go</span><br><span class="line">+++ b/cli/vendor/golang.org/x/sys/unix/ztypes_linux_mips64le.go</span><br><span class="line">@@ -677,6 +677,7 @@ type Ustat_t struct &#123;</span><br><span class="line"> </span><br><span class="line"> type EpollEvent struct &#123;</span><br><span class="line"> Events uint32</span><br><span class="line">+PadFd  int32</span><br><span class="line"> Fd     int32</span><br><span class="line"> Pad    int32</span><br><span class="line"> &#125;</span><br><span class="line">diff --git a/engine/daemon/graphdriver/copy/copy.go b/engine/daemon/graphdriver/copy/copy.go</span><br><span class="line">index 86316fd..d3e862e 100644</span><br><span class="line">--- a/engine/daemon/graphdriver/copy/copy.go</span><br><span class="line">+++ b/engine/daemon/graphdriver/copy/copy.go</span><br><span class="line">@@ -154,7 +154,7 @@ func DirCopy(srcDir, dstDir string, copyMode Mode, copyXattrs bool) error &#123;</span><br><span class="line"> </span><br><span class="line"> switch f.Mode() &amp; os.ModeType &#123;</span><br><span class="line"> case 0: // Regular file</span><br><span class="line">-id := fileID&#123;dev: stat.Dev, ino: stat.Ino&#125;</span><br><span class="line">+id := fileID&#123;dev: uint64(stat.Dev), ino: stat.Ino&#125;</span><br><span class="line"> if copyMode == Hardlink &#123;</span><br><span class="line"> isHardlink = true</span><br><span class="line"> if err2 := os.Link(srcPath, dstPath); err2 != nil &#123;</span><br><span class="line">diff --git a/engine/daemon/graphdriver/devmapper/deviceset.go b/engine/daemon/graphdriver/devmapper/deviceset.go</span><br><span class="line">index 2bfbf05..b2017ec 100644</span><br><span class="line">--- a/engine/daemon/graphdriver/devmapper/deviceset.go</span><br><span class="line">+++ b/engine/daemon/graphdriver/devmapper/deviceset.go</span><br><span class="line">@@ -1527,7 +1527,7 @@ func getDeviceMajorMinor(file *os.File) (uint64, uint64, error) &#123;</span><br><span class="line"> return 0, 0, err</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">-dev := stat.Rdev</span><br><span class="line">+dev := uint64(stat.Rdev)</span><br><span class="line"> majorNum := major(dev)</span><br><span class="line"> minorNum := minor(dev)</span><br><span class="line"> </span><br><span class="line">@@ -1738,7 +1738,7 @@ func (devices *DeviceSet) initDevmapper(doInit bool) (retErr error) &#123;</span><br><span class="line"> //- Managed by docker</span><br><span class="line"> //- The target of this device is at major &lt;maj&gt; and minor &lt;min&gt;</span><br><span class="line"> //- If &lt;inode&gt; is defined, use that file inside the device as a loopback image. Otherwise use the device itself.</span><br><span class="line">-devices.devicePrefix = fmt.Sprintf("docker-%d:%d-%d", major(st.Dev), minor(st.Dev), st.Ino)</span><br><span class="line">+devices.devicePrefix = fmt.Sprintf("docker-%d:%d-%d", major(uint64(st.Dev)), minor(uint64(st.Dev)), st.Ino)</span><br><span class="line"> logger.Debugf("Generated prefix: %s", devices.devicePrefix)</span><br><span class="line"> </span><br><span class="line"> // Check for the existence of the thin-pool device</span><br><span class="line">diff --git a/engine/hack/dockerfile/install/containerd.installer b/engine/hack/dockerfile/install/containerd.installer</span><br><span class="line">index dceae49..07a27d2 100755</span><br><span class="line">--- a/engine/hack/dockerfile/install/containerd.installer</span><br><span class="line">+++ b/engine/hack/dockerfile/install/containerd.installer</span><br><span class="line">@@ -8,10 +8,11 @@ CONTAINERD_COMMIT=468a545b9edcd5932818eb9de8e72413e616e86e # v1.1.2</span><br><span class="line"> </span><br><span class="line"> install_containerd() &#123;</span><br><span class="line"> echo "Install containerd version $CONTAINERD_COMMIT"</span><br><span class="line">-git clone https://github.com/containerd/containerd.git "$GOPATH/src/github.com/containerd/containerd"</span><br><span class="line">+#git clone https://github.com/containerd/containerd.git "$GOPATH/src/github.com/containerd/containerd"</span><br><span class="line"> cd "$GOPATH/src/github.com/containerd/containerd"</span><br><span class="line"> git checkout -q "$CONTAINERD_COMMIT"</span><br><span class="line">-</span><br><span class="line">+patch -p1 &lt; 0001-containerd-fix-build-error-on-mips64le-platform.patch</span><br><span class="line">+patch -p1 &lt; 0001-containerd-Fix-EpollEvent-define-for-mips64le.patch</span><br><span class="line"> (</span><br><span class="line"> </span><br><span class="line"> export BUILDTAGS='static_build netgo'</span><br><span class="line">@@ -28,9 +29,9 @@ install_containerd() &#123;</span><br><span class="line"> make</span><br><span class="line"> )</span><br><span class="line"> </span><br><span class="line">-mkdir -p $&#123;PREFIX&#125;</span><br><span class="line">+mkdir -p $&#123;BIN_DIR&#125;</span><br><span class="line"> </span><br><span class="line">-cp bin/containerd $&#123;PREFIX&#125;/docker-containerd</span><br><span class="line">-cp bin/containerd-shim $&#123;PREFIX&#125;/docker-containerd-shim</span><br><span class="line">-cp bin/ctr $&#123;PREFIX&#125;/docker-containerd-ctr</span><br><span class="line">+cp bin/containerd $&#123;BIN_DIR&#125;/docker-containerd</span><br><span class="line">+cp bin/containerd-shim $&#123;BIN_DIR&#125;/docker-containerd-shim</span><br><span class="line">+cp bin/ctr $&#123;BIN_DIR&#125;/docker-containerd-ctr</span><br><span class="line"> &#125;</span><br><span class="line">diff --git a/engine/hack/dockerfile/install/install.sh b/engine/hack/dockerfile/install/install.sh</span><br><span class="line">index a0ff09d..249182b 100755</span><br><span class="line">--- a/engine/hack/dockerfile/install/install.sh</span><br><span class="line">+++ b/engine/hack/dockerfile/install/install.sh</span><br><span class="line">@@ -7,7 +7,7 @@ RM_GOPATH=0</span><br><span class="line"> </span><br><span class="line"> TMP_GOPATH=$&#123;TMP_GOPATH:-""&#125;</span><br><span class="line"> </span><br><span class="line">-: $&#123;PREFIX:="/usr/local/bin"&#125;</span><br><span class="line">+: $&#123;BIN_DIR:="$&#123;HOME&#125;/docker-bin"&#125;</span><br><span class="line"> </span><br><span class="line"> if [ -z "$TMP_GOPATH" ]; then</span><br><span class="line"> export GOPATH="$(mktemp -d)"</span><br><span class="line">diff --git a/engine/hack/dockerfile/install/proxy.installer b/engine/hack/dockerfile/install/proxy.installer</span><br><span class="line">index 4983d90..19350fc 100755</span><br><span class="line">--- a/engine/hack/dockerfile/install/proxy.installer</span><br><span class="line">+++ b/engine/hack/dockerfile/install/proxy.installer</span><br><span class="line">@@ -23,16 +23,17 @@ install_proxy() &#123;</span><br><span class="line"> </span><br><span class="line"> install_proxy_dynamic() &#123;</span><br><span class="line"> export PROXY_LDFLAGS="-linkmode=external" install_proxy</span><br><span class="line">-export BUILD_MODE="-buildmode=pie"</span><br><span class="line">+#export BUILD_MODE="-buildmode=pie"</span><br><span class="line"> _install_proxy</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> _install_proxy() &#123;</span><br><span class="line"> echo "Install docker-proxy version $LIBNETWORK_COMMIT"</span><br><span class="line">-git clone https://github.com/docker/libnetwork.git "$GOPATH/src/github.com/docker/libnetwork"</span><br><span class="line">+#git clone https://github.com/docker/libnetwork.git "$GOPATH/src/github.com/docker/libnetwork"</span><br><span class="line"> cd "$GOPATH/src/github.com/docker/libnetwork"</span><br><span class="line"> git checkout -q "$LIBNETWORK_COMMIT"</span><br><span class="line">-go build $BUILD_MODE -ldflags="$PROXY_LDFLAGS" -o $&#123;PREFIX&#125;/docker-proxy github.com/docker/libnetwork/cmd/proxy</span><br><span class="line">+patch -p1 &lt; 0001-libnetwork-Fix-EpollEvent-define-for-mips64le.patch</span><br><span class="line">+go build $BUILD_MODE -ldflags="$PROXY_LDFLAGS" -o $&#123;BIN_DIR&#125;/docker-proxy github.com/docker/libnetwork/cmd/proxy</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">diff --git a/engine/hack/dockerfile/install/runc.installer b/engine/hack/dockerfile/install/runc.installer</span><br><span class="line">index 43b5504..17d834e 100755</span><br><span class="line">--- a/engine/hack/dockerfile/install/runc.installer</span><br><span class="line">+++ b/engine/hack/dockerfile/install/runc.installer</span><br><span class="line">@@ -8,9 +8,11 @@ install_runc() &#123;</span><br><span class="line"> RUNC_BUILDTAGS="$&#123;RUNC_BUILDTAGS:-"seccomp apparmor selinux"&#125;"</span><br><span class="line"> </span><br><span class="line"> echo "Install runc version $RUNC_COMMIT"</span><br><span class="line">-git clone https://github.com/docker/runc.git "$GOPATH/src/github.com/opencontainers/runc"</span><br><span class="line">+#git clone https://github.com/docker/runc.git "$GOPATH/src/github.com/opencontainers/runc"</span><br><span class="line"> cd "$GOPATH/src/github.com/opencontainers/runc"</span><br><span class="line"> git checkout -q "$RUNC_COMMIT"</span><br><span class="line">+patch -p1 &lt; 0001-runc-Fix-EpollEvent-define-for-mips64le.patch</span><br><span class="line">+sed -i 's@-buildmode=pie @@g' Makefile</span><br><span class="line"> if [ -z "$1" ]; then</span><br><span class="line"> target=static</span><br><span class="line"> else</span><br><span class="line">@@ -18,6 +20,6 @@ install_runc() &#123;</span><br><span class="line"> fi</span><br><span class="line"><span class="meta"> #</span><span class="bash"> TODO: Remove me before 18.06.4</span></span><br><span class="line"> make BUILDTAGS="$RUNC_BUILDTAGS" VERSION="1.0.0-rc5+dev.docker-18.06" "$target"</span><br><span class="line">-mkdir -p $&#123;PREFIX&#125;</span><br><span class="line">-cp runc $&#123;PREFIX&#125;/docker-runc</span><br><span class="line">+mkdir -p $&#123;BIN_DIR&#125;</span><br><span class="line">+cp runc $&#123;BIN_DIR&#125;/docker-runc</span><br><span class="line"> &#125;</span><br><span class="line">diff --git a/engine/hack/dockerfile/install/tini.installer b/engine/hack/dockerfile/install/tini.installer</span><br><span class="line">index 34f43f1..fba49b4 100755</span><br><span class="line">--- a/engine/hack/dockerfile/install/tini.installer</span><br><span class="line">+++ b/engine/hack/dockerfile/install/tini.installer</span><br><span class="line">@@ -4,11 +4,11 @@ TINI_COMMIT=fec3683b971d9c3ef73f284f176672c44b448662 # v0.18.0</span><br><span class="line"> </span><br><span class="line"> install_tini() &#123;</span><br><span class="line"> echo "Install tini version $TINI_COMMIT"</span><br><span class="line">-git clone https://github.com/krallin/tini.git "$GOPATH/tini"</span><br><span class="line">+#git clone https://github.com/krallin/tini.git "$GOPATH/tini"</span><br><span class="line"> cd "$GOPATH/tini"</span><br><span class="line"> git checkout -q "$TINI_COMMIT"</span><br><span class="line"> cmake .</span><br><span class="line"> make tini-static</span><br><span class="line">-mkdir -p $&#123;PREFIX&#125;</span><br><span class="line">-cp tini-static $&#123;PREFIX&#125;/docker-init</span><br><span class="line">+mkdir -p $&#123;BIN_DIR&#125;</span><br><span class="line">+cp tini-static $&#123;BIN_DIR&#125;/docker-init</span><br><span class="line"> &#125;</span><br><span class="line">diff --git a/engine/hack/make/.binary b/engine/hack/make/.binary</span><br><span class="line">index 9375926..23a039c 100644</span><br><span class="line">--- a/engine/hack/make/.binary</span><br><span class="line">+++ b/engine/hack/make/.binary</span><br><span class="line">@@ -51,9 +51,9 @@ if [ "$(go env GOOS)/$(go env GOARCH)" != "$(go env GOHOSTOS)/$(go env GOHOSTARC</span><br><span class="line"> fi</span><br><span class="line"> </span><br><span class="line"><span class="meta"> #</span><span class="bash"> -buildmode=pie is not supported on Windows.</span></span><br><span class="line">-if [ "$(go env GOOS)" != "windows" ]; then</span><br><span class="line">-BUILDFLAGS+=( "-buildmode=pie" )</span><br><span class="line">-fi</span><br><span class="line">+#if [ "$(go env GOOS)" != "windows" ]; then</span><br><span class="line">+#BUILDFLAGS+=( "-buildmode=pie" )</span><br><span class="line">+#fi</span><br><span class="line"> </span><br><span class="line"> echo "Building: $DEST/$BINARY_FULLNAME"</span><br><span class="line"> go build \</span><br><span class="line">diff --git a/engine/pkg/loopback/loopback.go b/engine/pkg/loopback/loopback.go</span><br><span class="line">index 086655b..b5d0bfc 100644</span><br><span class="line">--- a/engine/pkg/loopback/loopback.go</span><br><span class="line">+++ b/engine/pkg/loopback/loopback.go</span><br><span class="line">@@ -54,7 +54,7 @@ func FindLoopDeviceFor(file *os.File) *os.File &#123;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> dev, inode, err := getLoopbackBackingFile(file)</span><br><span class="line">-if err == nil &amp;&amp; dev == targetDevice &amp;&amp; inode == targetInode &#123;</span><br><span class="line">+if err == nil &amp;&amp; dev == uint64(targetDevice) &amp;&amp; inode == targetInode &#123;</span><br><span class="line"> return file</span><br><span class="line"> &#125;</span><br><span class="line"> file.Close()</span><br><span class="line">diff --git a/engine/pkg/signal/signal_linux.go b/engine/pkg/signal/signal_linux.go</span><br><span class="line">index caed97c..c9bab45 100644</span><br><span class="line">--- a/engine/pkg/signal/signal_linux.go</span><br><span class="line">+++ b/engine/pkg/signal/signal_linux.go</span><br><span class="line">@@ -32,7 +32,6 @@ var SignalMap = map[string]syscall.Signal&#123;</span><br><span class="line"> "PWR":      unix.SIGPWR,</span><br><span class="line"> "QUIT":     unix.SIGQUIT,</span><br><span class="line"> "SEGV":     unix.SIGSEGV,</span><br><span class="line">-"STKFLT":   unix.SIGSTKFLT,</span><br><span class="line"> "STOP":     unix.SIGSTOP,</span><br><span class="line"> "SYS":      unix.SIGSYS,</span><br><span class="line"> "TERM":     unix.SIGTERM,</span><br><span class="line">diff --git a/engine/pkg/system/stat_linux.go b/engine/pkg/system/stat_linux.go</span><br><span class="line">index 98c9eb1..8a090a5 100644</span><br><span class="line">--- a/engine/pkg/system/stat_linux.go</span><br><span class="line">+++ b/engine/pkg/system/stat_linux.go</span><br><span class="line">@@ -8,7 +8,7 @@ func fromStatT(s *syscall.Stat_t) (*StatT, error) &#123;</span><br><span class="line"> mode: s.Mode,</span><br><span class="line"> uid:  s.Uid,</span><br><span class="line"> gid:  s.Gid,</span><br><span class="line">-rdev: s.Rdev,</span><br><span class="line">+rdev: uint64(s.Rdev),</span><br><span class="line"> mtim: s.Mtim&#125;, nil</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">diff --git a/engine/vendor/github.com/boltdb/bolt/bolt_mips64le.go b/engine/vendor/github.com/boltdb/bolt/bolt_mips64le.go</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..0876965</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/engine/vendor/github.com/boltdb/bolt/bolt_mips64le.go</span><br><span class="line">@@ -0,0 +1,13 @@</span><br><span class="line">+// +build mips64le</span><br><span class="line">+</span><br><span class="line">+package bolt</span><br><span class="line">+</span><br><span class="line">+// maxMapSize represents the largest mmap size supported by Bolt.</span><br><span class="line">+const maxMapSize = 0xFFFFFFFFFFFF // 256TB</span><br><span class="line">+</span><br><span class="line">+// maxAllocSize is the size used when creating array pointers.</span><br><span class="line">+const maxAllocSize = 0x7FFFFFFF</span><br><span class="line">+</span><br><span class="line">+// Are unaligned load/stores broken on this arch?</span><br><span class="line">+var brokenUnaligned = false</span><br><span class="line">+</span><br><span class="line">diff --git a/engine/vendor/github.com/containerd/continuity/sysx/xattr_linux_mips64le.go b/engine/vendor/github.com/containerd/continuity/sysx/xattr_linux_mips64le.go</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..240ccf9</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/engine/vendor/github.com/containerd/continuity/sysx/xattr_linux_mips64le.go</span><br><span class="line">@@ -0,0 +1,112 @@</span><br><span class="line">+// mksyscall.pl xattr_linux.go</span><br><span class="line">+// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT</span><br><span class="line">+</span><br><span class="line">+package sysx</span><br><span class="line">+</span><br><span class="line">+import (</span><br><span class="line">+       "syscall"</span><br><span class="line">+       "unsafe"</span><br><span class="line">+)</span><br><span class="line">+</span><br><span class="line">+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span><br><span class="line">+</span><br><span class="line">+func llistxattr(path string, dest []byte) (sz int, err error) &#123;</span><br><span class="line">+       var _p0 *byte</span><br><span class="line">+       _p0, err = syscall.BytePtrFromString(path)</span><br><span class="line">+       if err != nil &#123;</span><br><span class="line">+               return</span><br><span class="line">+       &#125;</span><br><span class="line">+       var _p1 unsafe.Pointer</span><br><span class="line">+       if len(dest) &gt; 0 &#123;</span><br><span class="line">+               _p1 = unsafe.Pointer(&amp;dest[0])</span><br><span class="line">+       &#125; else &#123;</span><br><span class="line">+               _p1 = unsafe.Pointer(&amp;_zero)</span><br><span class="line">+       &#125;</span><br><span class="line">+       r0, _, e1 := syscall.Syscall(syscall.SYS_LLISTXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(_p1), uintptr(len(dest)))</span><br><span class="line">+       use(unsafe.Pointer(_p0))</span><br><span class="line">+       sz = int(r0)</span><br><span class="line">+       if e1 != 0 &#123;</span><br><span class="line">+               err = errnoErr(e1)</span><br><span class="line">+       &#125;</span><br><span class="line">+       return</span><br><span class="line">+&#125;</span><br><span class="line">+</span><br><span class="line">+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span><br><span class="line">+</span><br><span class="line">+func lremovexattr(path string, attr string) (err error) &#123;</span><br><span class="line">+       var _p0 *byte</span><br><span class="line">+       _p0, err = syscall.BytePtrFromString(path)</span><br><span class="line">+       if err != nil &#123;</span><br><span class="line">+               return</span><br><span class="line">+       &#125;</span><br><span class="line">+       var _p1 *byte</span><br><span class="line">+       _p1, err = syscall.BytePtrFromString(attr)</span><br><span class="line">+       if err != nil &#123;</span><br><span class="line">+               return</span><br><span class="line">+       &#125;</span><br><span class="line">+       _, _, e1 := syscall.Syscall(syscall.SYS_LREMOVEXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), 0)</span><br><span class="line">+       use(unsafe.Pointer(_p0))</span><br><span class="line">+       use(unsafe.Pointer(_p1))</span><br><span class="line">+       if e1 != 0 &#123;</span><br><span class="line">+               err = errnoErr(e1)</span><br><span class="line">+       &#125;</span><br><span class="line">+       return</span><br><span class="line">+&#125;</span><br><span class="line">+</span><br><span class="line">+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span><br><span class="line">+</span><br><span class="line">+func lsetxattr(path string, attr string, data []byte, flags int) (err error) &#123;</span><br><span class="line">+       var _p0 *byte</span><br><span class="line">+       _p0, err = syscall.BytePtrFromString(path)</span><br><span class="line">+       if err != nil &#123;</span><br><span class="line">+               return</span><br><span class="line">+       &#125;</span><br><span class="line">+       var _p1 *byte</span><br><span class="line">+       _p1, err = syscall.BytePtrFromString(attr)</span><br><span class="line">+       if err != nil &#123;</span><br><span class="line">+               return</span><br><span class="line">+       &#125;</span><br><span class="line">+       var _p2 unsafe.Pointer</span><br><span class="line">+       if len(data) &gt; 0 &#123;</span><br><span class="line">+               _p2 = unsafe.Pointer(&amp;data[0])</span><br><span class="line">+       &#125; else &#123;</span><br><span class="line">+               _p2 = unsafe.Pointer(&amp;_zero)</span><br><span class="line">+       &#125;</span><br><span class="line">+       _, _, e1 := syscall.Syscall6(syscall.SYS_LSETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(data)), uintptr(flags), 0)</span><br><span class="line">+       use(unsafe.Pointer(_p0))</span><br><span class="line">+       use(unsafe.Pointer(_p1))</span><br><span class="line">+       if e1 != 0 &#123;</span><br><span class="line">+               err = errnoErr(e1)</span><br><span class="line">+       &#125;</span><br><span class="line">+       return</span><br><span class="line">+&#125;</span><br><span class="line">+</span><br><span class="line">+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT</span><br><span class="line">+</span><br><span class="line">+func lgetxattr(path string, attr string, dest []byte) (sz int, err error) &#123;</span><br><span class="line">+       var _p0 *byte</span><br><span class="line">+       _p0, err = syscall.BytePtrFromString(path)</span><br><span class="line">+       if err != nil &#123;</span><br><span class="line">+               return</span><br><span class="line">+       &#125;</span><br><span class="line">+       var _p1 *byte</span><br><span class="line">+       _p1, err = syscall.BytePtrFromString(attr)</span><br><span class="line">+       if err != nil &#123;</span><br><span class="line">+               return</span><br><span class="line">+       &#125;</span><br><span class="line">+       var _p2 unsafe.Pointer</span><br><span class="line">+       if len(dest) &gt; 0 &#123;</span><br><span class="line">+               _p2 = unsafe.Pointer(&amp;dest[0])</span><br><span class="line">+       &#125; else &#123;</span><br><span class="line">+               _p2 = unsafe.Pointer(&amp;_zero)</span><br><span class="line">+       &#125;</span><br><span class="line">+       r0, _, e1 := syscall.Syscall6(syscall.SYS_LGETXATTR, uintptr(unsafe.Pointer(_p0)), uintptr(unsafe.Pointer(_p1)), uintptr(_p2), uintptr(len(dest)), 0, 0)</span><br><span class="line">+       use(unsafe.Pointer(_p0))</span><br><span class="line">+       use(unsafe.Pointer(_p1))</span><br><span class="line">+       sz = int(r0)</span><br><span class="line">+       if e1 != 0 &#123;</span><br><span class="line">+               err = errnoErr(e1)</span><br><span class="line">+       &#125;</span><br><span class="line">+       return</span><br><span class="line">+&#125;</span><br><span class="line">+</span><br><span class="line">diff --git a/engine/vendor/github.com/opencontainers/runc/libcontainer/devices/devices.go b/engine/vendor/github.com/opencontainers/runc/libcontainer/devices/devices.go</span><br><span class="line">index 3619258..3079ffd 100644</span><br><span class="line">--- a/engine/vendor/github.com/opencontainers/runc/libcontainer/devices/devices.go</span><br><span class="line">+++ b/engine/vendor/github.com/opencontainers/runc/libcontainer/devices/devices.go</span><br><span class="line">@@ -30,7 +30,7 @@ func DeviceFromPath(path, permissions string) (*configs.Device, error) &#123;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> var (</span><br><span class="line">-devNumber = stat.Rdev</span><br><span class="line">+devNumber = uint64(stat.Rdev)</span><br><span class="line"> major     = unix.Major(devNumber)</span><br><span class="line"> )</span><br><span class="line"> if major == 0 &#123;</span><br><span class="line">diff --git a/engine/vendor/github.com/vishvananda/netns/netns_linux_mips64le.go b/engine/vendor/github.com/vishvananda/netns/netns_linux_mips64le.go</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..90d3031</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/engine/vendor/github.com/vishvananda/netns/netns_linux_mips64le.go</span><br><span class="line">@@ -0,0 +1,8 @@</span><br><span class="line">+// +build linux,mips64le</span><br><span class="line">+</span><br><span class="line">+package netns</span><br><span class="line">+</span><br><span class="line">+const (</span><br><span class="line">+       SYS_SETNS = 5303</span><br><span class="line">+)</span><br><span class="line">+</span><br><span class="line">diff --git a/engine/vendor/golang.org/x/sys/unix/ztypes_linux_mips64le.go b/engine/vendor/golang.org/x/sys/unix/ztypes_linux_mips64le.go</span><br><span class="line">index 6f9452d..0b279cc 100644</span><br><span class="line">--- a/engine/vendor/golang.org/x/sys/unix/ztypes_linux_mips64le.go</span><br><span class="line">+++ b/engine/vendor/golang.org/x/sys/unix/ztypes_linux_mips64le.go</span><br><span class="line">@@ -677,6 +677,7 @@ type Ustat_t struct &#123;</span><br><span class="line"> </span><br><span class="line"> type EpollEvent struct &#123;</span><br><span class="line"> Events uint32</span><br><span class="line">+PadFd  int32</span><br><span class="line"> Fd     int32</span><br><span class="line"> Pad    int32</span><br><span class="line"> &#125;</span><br><span class="line">--</span><br></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">type</span> EpollEvent <span class="keyword">struct</span> &#123;</span><br><span class="line"> Events <span class="keyword">uint32</span></span><br><span class="line">+PadFd  <span class="keyword">int32</span></span><br><span class="line"> Fd     <span class="keyword">int32</span></span><br><span class="line"> Pad    <span class="keyword">int32</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>EpollEvent 这个struct都需要添加PadFd，否则会有问题，例如docker exec 会卡住等。</p><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>我这里是手工编译的，例如：</p><p>dockerd/cli:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VERSION=v18.09.8 GITCOMMIT=456712c5b8 ./hack/make.sh</span><br><span class="line">VERSION=v18.09.8 make</span><br></pre></td></tr></table></figure></p><p>runc:</p><p><del>make BUILDTAGS=’seccomp apparmor’ static</del></p><p>这里注意如果静态编译runc/docker的话，是不支持systemd的cgroup driver。相关<a href="https://github.com/moby/moby/issues/38753#issuecomment-465290976" target="_blank" rel="noopener">issues</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make BUILDTAGS=&apos;seccomp apparmor&apos;</span><br></pre></td></tr></table></figure><p>docker-proxy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CGO_ENABLED=0 go build -ldflags=&quot;-linkmode=external&quot;         -o ./docker-proxy         github.com/docker/libnetwork/cmd/proxy</span><br></pre></td></tr></table></figure><p>init:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake . &amp;&amp; make tini-static</span><br></pre></td></tr></table></figure></p><p>containerd:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></p><h1 id="构建deb"><a href="#构建deb" class="headerlink" title="构建deb"></a>构建deb</h1><p>这里二进制生成后，构建deb即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前需要在mips64el 3B4000 下适配编译&lt;code&gt;UOS 20&lt;/code&gt;的&lt;code&gt;docker-ce 18.09/18.06&lt;/code&gt;版本。&lt;/p&gt;
&lt;p&gt;这里记录下18.06的编译，09如法炮制：&lt;/p&gt;
&lt;h1 id=&quot;编译环境&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="docker" scheme="http://liupeng0518.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="http://liupeng0518.github.io/tags/docker/"/>
    
      <category term="mips64el" scheme="http://liupeng0518.github.io/tags/mips64el/"/>
    
      <category term="source" scheme="http://liupeng0518.github.io/tags/source/"/>
    
  </entry>
  
  <entry>
    <title>Understanding: PLEG is not healthy</title>
    <link href="http://liupeng0518.github.io/2019/12/24/k8s/op/understanding-the-pleg-is-not-healthy/"/>
    <id>http://liupeng0518.github.io/2019/12/24/k8s/op/understanding-the-pleg-is-not-healthy/</id>
    <published>2019-12-24T17:13:01.000Z</published>
    <updated>2021-06-14T17:19:06.988Z</updated>
    
    <content type="html"><![CDATA[<p>在本文中，我将探讨Kubernetes中的<strong>PLEG is not healthy</strong>问题，该问题有时会导致节点“ NodeNotReady” 。当了解Pod Lifecycle Event Generator (PLEG) 如何工作后，在遇到此问题也就方便排查。</p><h1 id="什么是PLEG"><a href="#什么是PLEG" class="headerlink" title="什么是PLEG"></a>什么是PLEG</h1><hr><p>PLEG 主要是通过每个匹配的 Pod 级别事件来调整容器运行时的状态，并将调整后的结果写入缓存，使 <code>Pod</code> 缓存保持最新状态。 他是 kubelet (Kubernetes)  中的一个模块。</p><p>下面红线部分是PLEG的工作：</p><p><img src="https://developers.redhat.com/blog/wp-content/uploads/2019/10/orig-pleg-1.png" alt="img"></p><p>出处: <a href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/node/pod-lifecycle-event-generator.md" target="_blank" rel="noopener">Kubelet: Pod Lifecycle Event Generator (PLEG)</a>.</p><h1 id="“PLEG-is-not-healthy”如何产生的"><a href="#“PLEG-is-not-healthy”如何产生的" class="headerlink" title="“PLEG is not healthy”如何产生的"></a>“PLEG is not healthy”如何产生的</h1><p>Kubelet会在SyncLoop()中定期调用Healthy()来对PLEG运行状况进行健康检查。</p><p><code>Healthy()</code> 函数会检查 <code>relist</code> 进程（PLEG 的关键任务）是否在 3 分钟内完成。此函数会以 “PLEG” 的形式添加到 <code>runtimeState</code> 中，Kubelet 在一个同步循环（<code>SyncLoop()</code> 函数）中会定期（默认是 10s）调用 <code>Healthy()</code> 函数。如果 relist 进程的完成时间超过了 3 分钟，就会报告 <strong>PLEG is not healthy</strong>。</p><p><img src="https://developers.redhat.com/blog/wp-content/uploads/2019/10/pleg-healthy-checks.png" alt="img"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//// pkg/kubelet/pleg/generic.go - Healthy()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The threshold needs to be greater than the relisting period + the</span></span><br><span class="line"><span class="comment">// relisting time, which can vary significantly. Set a conservative</span></span><br><span class="line"><span class="comment">// threshold to avoid flipping between healthy and unhealthy.</span></span><br><span class="line">relistThreshold = <span class="number">3</span> * time.Minute</span><br><span class="line">:</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *GenericPLEG)</span> <span class="title">Healthy</span><span class="params">()</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">  relistTime := g.getRelistTime()</span><br><span class="line">  elapsed := g.clock.Since(relistTime)</span><br><span class="line">  <span class="keyword">if</span> elapsed &gt; relistThreshold &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, fmt.Errorf(<span class="string">"pleg was last seen active %v ago; threshold is %v"</span>, elapsed, relistThreshold)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//// pkg/kubelet/kubelet.go - NewMainKubelet()</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMainKubelet</span><span class="params">(kubeCfg *kubeletconfiginternal.KubeletConfiguration, ...</span></span></span><br><span class="line"><span class="function"><span class="params">:</span></span></span><br><span class="line">  klet.runtimeState.addHealthCheck("PLEG", klet.pleg.Healthy)</span><br><span class="line"></span><br><span class="line"><span class="comment">//// pkg/kubelet/kubelet.go - syncLoop()</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(kl *Kubelet)</span> <span class="title">syncLoop</span><span class="params">(updates &lt;-<span class="keyword">chan</span> kubetypes.PodUpdate, handler SyncHandler)</span></span> &#123;</span><br><span class="line">:</span><br><span class="line"><span class="comment">// The resyncTicker wakes up kubelet to checks if there are any pod workers</span></span><br><span class="line"><span class="comment">// that need to be sync'd. A one-second period is sufficient because the</span></span><br><span class="line"><span class="comment">// sync interval is defaulted to 10s.</span></span><br><span class="line">:</span><br><span class="line">  <span class="keyword">const</span> (</span><br><span class="line">base   = <span class="number">100</span> * time.Millisecond</span><br><span class="line">max= <span class="number">5</span> * time.Second</span><br><span class="line">factor = <span class="number">2</span></span><br><span class="line">  )</span><br><span class="line">  duration := base</span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> rs := kl.runtimeState.runtimeErrors(); <span class="built_in">len</span>(rs) != <span class="number">0</span> &#123;</span><br><span class="line">      glog.Infof(<span class="string">"skipping pod synchronization - %v"</span>, rs)</span><br><span class="line">      <span class="comment">// exponential backoff</span></span><br><span class="line">      time.Sleep(duration)</span><br><span class="line">      duration = time.Duration(math.Min(<span class="keyword">float64</span>(max), factor*<span class="keyword">float64</span>(duration)))</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">:</span><br><span class="line">  &#125;</span><br><span class="line">:</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//// pkg/kubelet/runtime.go - runtimeErrors()</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *runtimeState)</span> <span class="title">runtimeErrors</span><span class="params">()</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">:</span><br><span class="line">    <span class="keyword">for</span> _, hc := <span class="keyword">range</span> s.healthChecks &#123;</span><br><span class="line">    <span class="keyword">if</span> ok, err := hc.fn(); !ok &#123;</span><br><span class="line">    ret = <span class="built_in">append</span>(ret, fmt.Sprintf(<span class="string">"%s is not healthy: %v"</span>, hc.name, err))</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Review-“relist”"><a href="#Review-“relist”" class="headerlink" title="Review “relist”"></a>Review “relist”</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><hr><ul><li><a href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/node/pod-lifecycle-event-generator.md" target="_blank" rel="noopener">Kubelet: Pod Lifecycle Event Generator (PLEG)</a></li><li><a href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/node/runtime-pod-cache.md" target="_blank" rel="noopener">Kubelet: Runtime Pod Cache</a></li><li><a href="https://github.com/openshift/origin/blob/release-3.11/vendor/k8s.io/kubernetes/pkg/kubelet/pleg/generic.go#L180-L284" target="_blank" rel="noopener">relist() in kubernetes/pkg/kubelet/pleg/generic.go</a></li><li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1486914#c16" target="_blank" rel="noopener">Past bug about CNI — PLEG is not healthy error, node marked NotReady</a></li></ul><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h1><p><a href="https://access.redhat.com/articles/4528671" target="_blank" rel="noopener">https://access.redhat.com/articles/4528671</a></p><p><a href="https://developers.redhat.com/blog/2019/11/13/pod-lifecycle-event-generator-understanding-the-pleg-is-not-healthy-issue-in-kubernetes/" target="_blank" rel="noopener">https://developers.redhat.com/blog/2019/11/13/pod-lifecycle-event-generator-understanding-the-pleg-is-not-healthy-issue-in-kubernetes/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在本文中，我将探讨Kubernetes中的&lt;strong&gt;PLEG is not healthy&lt;/strong&gt;问题，该问题有时会导致节点“ NodeNotReady” 。当了解Pod Lifecycle Event Generator (PLEG) 如何工作后，在遇到此
      
    
    </summary>
    
    
      <category term="k8s" scheme="http://liupeng0518.github.io/categories/k8s/"/>
    
    
      <category term="k8s" scheme="http://liupeng0518.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>镜像仓库</title>
    <link href="http://liupeng0518.github.io/2019/12/24/k8s/registry/registryv2/%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/"/>
    <id>http://liupeng0518.github.io/2019/12/24/k8s/registry/registryv2/%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</id>
    <published>2019-12-24T09:47:19.000Z</published>
    <updated>2021-06-14T17:19:06.988Z</updated>
    
    <content type="html"><![CDATA[<p># </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;# &lt;/p&gt;

      
    
    </summary>
    
    
      <category term="docker" scheme="http://liupeng0518.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="http://liupeng0518.github.io/tags/docker/"/>
    
      <category term="registry" scheme="http://liupeng0518.github.io/tags/registry/"/>
    
  </entry>
  
  <entry>
    <title>[转]k8s iptables 规则查看</title>
    <link href="http://liupeng0518.github.io/2019/11/29/k8s/kube-proxy/trace%20iptables/"/>
    <id>http://liupeng0518.github.io/2019/11/29/k8s/kube-proxy/trace%20iptables/</id>
    <published>2019-11-29T09:47:19.000Z</published>
    <updated>2021-06-14T17:19:06.988Z</updated>
    
    <content type="html"><![CDATA[<p>在访问 k8s 服务时，有时会出现一直连不上的问题，我们可以通过分析 iptables 和抓包的方式观察报文是否正确到达。</p><h2 id="Iptables-跟踪"><a href="#Iptables-跟踪" class="headerlink" title="Iptables 跟踪"></a>Iptables 跟踪</h2><p>设置如下，具体参考[1]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Load the (IPv4) netfilter log kernel module</span><br><span class="line">modprobe nf_log_ipv4</span><br><span class="line"></span><br><span class="line"># Enable logging for the IPv4 (AF Family 2)</span><br><span class="line">sysctl net.netfilter.nf_log.2=nf_log_ipv4</span><br><span class="line"></span><br><span class="line"># restart rsyslogd</span><br><span class="line">systemctl restart rsyslog</span><br></pre></td></tr></table></figure><p>这里我们以 k8s NodePort 类型的 service 为例，假如我们希望追踪 23741 端口的规则，设置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -t raw -j TRACE -p tcp --dport 32741 -I PREROUTING 1</span><br><span class="line">iptables -t raw -j TRACE -p tcp --dport 32741 -I OUTPUT 1</span><br></pre></td></tr></table></figure><h3 id="查看-var-log-messages-中的追踪记录"><a href="#查看-var-log-messages-中的追踪记录" class="headerlink" title="查看 /var/log/messages 中的追踪记录"></a>查看 <code>/var/log/messages</code> 中的追踪记录</h3><p>为了查看规则，现在某个机器上 curl 一下主机的 32741 端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">raw:PREROUTING:policy:2 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000)</span><br><span class="line">nat:PREROUTING:rule:1 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000)</span><br><span class="line">nat:KUBE-SERVICES:rule:9 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000)</span><br><span class="line">nat:KUBE-NODEPORTS:rule:1 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000)</span><br><span class="line">nat:KUBE-MARK-MASQ:rule:1 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000)</span><br><span class="line">nat:KUBE-MARK-MASQ:return:2 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br><span class="line">nat:KUBE-NODEPORTS:rule:2 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br><span class="line">nat:KUBE-SVC-4N57TFCL4MD7ZTDA:rule:1 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br><span class="line">nat:KUBE-SEP-PJQYOXMI5CEBVECW:rule:2 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br><span class="line">filter:FORWARD:rule:1 IN=enp0s3 OUT=cni0 MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.3.4 LEN=64 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=50995 DPT=80 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br><span class="line">filter:KUBE-FORWARD:rule:1 IN=enp0s3 OUT=cni0 MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.3.4 LEN=64 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=50995 DPT=80 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br><span class="line">nat:POSTROUTING:rule:1 IN= OUT=cni0 SRC=192.168.199.132 DST=192.168.3.4 LEN=64 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=50995 DPT=80 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br><span class="line">nat:KUBE-POSTROUTING:rule:1 IN= OUT=cni0 SRC=192.168.199.132 DST=192.168.3.4 LEN=64 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=50995 DPT=80 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br><span class="line">raw:PREROUTING:policy:2 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=52 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343890 ACK=3563071810 WINDOW=4106 RES=0x00 ACK URGP=0 OPT (0101080A08CB9A71008611F0)</span><br></pre></td></tr></table></figure><p>根据上面的图我们知道报文是按照 <code>nat:PREROUTING</code> -&gt; <code>filter:FORWARD</code> -&gt; <code>nat:POSTROUTING</code> 传输的。</p><p>按规则分析，先看第一条：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nat:PREROUTING:rule:1 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000)</span><br></pre></td></tr></table></figure><p>iptables 的 PREROUTING 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Chain PREROUTING (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">KUBE-SERVICES  all  --  0.0.0.0/0            0.0.0.0/0            /* kubernetes service portals */</span><br><span class="line">DOCKER     all  --  0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL</span><br></pre></td></tr></table></figure><p>可以看出所有报文都会匹配第一条规则，也就是 <code>KUBE-SERVICES</code>, 也就是 trace 里的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nat:KUBE-SERVICES:rule:9 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000)</span><br></pre></td></tr></table></figure><p>再看 iptables 的 KUBE-SERVICES</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Chain KUBE-SERVICES (2 references)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">KUBE-MARK-MASQ  udp  -- !192.168.3.0/24       192.168.2.10         /* kube-system/kube-dns:dns cluster IP */ udp dpt:53</span><br><span class="line">KUBE-SVC-TCOU7JCQXEZGVUNU  udp  --  0.0.0.0/0            192.168.2.10         /* kube-system/kube-dns:dns cluster IP */ udp dpt:53</span><br><span class="line">KUBE-MARK-MASQ  tcp  -- !192.168.3.0/24       192.168.2.10         /* kube-system/kube-dns:dns-tcp cluster IP */ tcp dpt:53</span><br><span class="line">KUBE-SVC-ERIFXISQEP7F7OF4  tcp  --  0.0.0.0/0            192.168.2.10         /* kube-system/kube-dns:dns-tcp cluster IP */ tcp dpt:53</span><br><span class="line">KUBE-MARK-MASQ  tcp  -- !192.168.3.0/24       192.168.2.1          /* default/kubernetes:https cluster IP */ tcp dpt:443</span><br><span class="line">KUBE-SVC-NPX46M4PTMTKRN6Y  tcp  --  0.0.0.0/0            192.168.2.1          /* default/kubernetes:https cluster IP */ tcp dpt:443</span><br><span class="line">KUBE-MARK-MASQ  tcp  -- !192.168.3.0/24       192.168.2.125        /* default/nginx: cluster IP */ tcp dpt:80</span><br><span class="line">KUBE-SVC-4N57TFCL4MD7ZTDA  tcp  --  0.0.0.0/0            192.168.2.125        /* default/nginx: cluster IP */ tcp dpt:80</span><br><span class="line">KUBE-NODEPORTS  all  --  0.0.0.0/0            0.0.0.0/0            /* kubernetes service nodeports; NOTE: this must be the last rule in this chain */ ADDRTYPE match dst-type LOCAL</span><br></pre></td></tr></table></figure><p>很明显匹配的是 <code>KUBE-NODEPORTS</code>, 也就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRACE: nat:KUBE-NODEPORTS:rule:1 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000)</span><br></pre></td></tr></table></figure><p>iptables 的 KUBE-NODEPORTS 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Chain KUBE-NODEPORTS (1 references)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">KUBE-MARK-MASQ  tcp  --  0.0.0.0/0            0.0.0.0/0            /* default/nginx: */ tcp dpt:32741</span><br><span class="line">KUBE-SVC-4N57TFCL4MD7ZTDA  tcp  --  0.0.0.0/0            0.0.0.0/0            /* default/nginx: */ tcp dpt:32741</span><br></pre></td></tr></table></figure><p>先走第一个条 <code>KUBE-MARK-MASQ</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRACE: nat:KUBE-MARK-MASQ:rule:1 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000)</span><br></pre></td></tr></table></figure><p>iptables 的 KUBE-MARK-MASQ 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Chain KUBE-MARK-MASQ (11 references)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">MARK       all  --  0.0.0.0/0            0.0.0.0/0            MARK or 0x4000</span><br></pre></td></tr></table></figure><p>k8s 会给报文打上 <code>0x4000</code> 的标签, 打完标签后会返回，然后继续匹配 <code>KUBE-NODEPORTS</code> 的下一条规则。也就是 <code>KUBE-SVC-4N57TFCL4MD7ZTDA</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TRACE: nat:KUBE-MARK-MASQ:return:2 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br><span class="line"></span><br><span class="line">TRACE: nat:KUBE-NODEPORTS:rule:2 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br><span class="line"></span><br><span class="line">TRACE: nat:KUBE-SVC-4N57TFCL4MD7ZTDA:rule:1 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br></pre></td></tr></table></figure><p>iptables 的 KUBE-SVC-4N57TFCL4MD7ZTDA 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Chain KUBE-SVC-4N57TFCL4MD7ZTDA (2 references)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">KUBE-SEP-PJQYOXMI5CEBVECW  all  --  0.0.0.0/0            0.0.0.0/0</span><br></pre></td></tr></table></figure><p>进入 KUBE-SEP-PJQYOXMI5CEBVECW</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRACE: nat:KUBE-SEP-PJQYOXMI5CEBVECW:rule:2 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br></pre></td></tr></table></figure><p>iptables 的 KUBE-SEP-PJQYOXMI5CEBVECW 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Chain KUBE-SEP-PJQYOXMI5CEBVECW (1 references)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">KUBE-MARK-MASQ  all  --  192.168.3.4          0.0.0.0/0</span><br><span class="line">DNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp to:192.168.3.4:80</span><br></pre></td></tr></table></figure><p>可以看到这里走的是 DNAT, 将报文中的目的地址换成了 <code>92.168.3.4:80</code>, 也就是 k8s 服务对应 pod 的 ip 和端口号。</p><p>DNAT 完了之后会将报文发给 filter 表的 FORWARD 链。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRACE: filter:FORWARD:rule:1 IN=enp0s3 OUT=cni0 MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.3.4 LEN=64 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=50995 DPT=80 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br></pre></td></tr></table></figure><p>iptables 的 FORWARD 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Chain FORWARD (policy DROP)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">KUBE-FORWARD  all  --  0.0.0.0/0            0.0.0.0/0            /* kubernetes forwarding rules */</span><br><span class="line">DOCKER-ISOLATION  all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">DOCKER     all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED</span><br><span class="line">ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">ACCEPT     all  --  192.168.3.0/24       0.0.0.0/0</span><br><span class="line">ACCEPT     all  --  0.0.0.0/0            192.168.3.0/24</span><br></pre></td></tr></table></figure><p>可以看到匹配第一条，进入 KUBE-FORWARD</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRACE: filter:KUBE-FORWARD:rule:1 IN=enp0s3 OUT=cni0 MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.3.4 LEN=64 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=50995 DPT=80 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br></pre></td></tr></table></figure><p>iptables 的 KUBE-FORWARD 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Chain KUBE-FORWARD (1 references)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0            /* kubernetes forwarding rules */ mark match 0x4000/0x4000</span><br><span class="line">ACCEPT     all  --  192.168.3.0/24       0.0.0.0/0            /* kubernetes forwarding conntrack pod source rule */ ctstate RELATED,ESTABLISHED</span><br><span class="line">ACCEPT     all  --  0.0.0.0/0            192.168.3.0/24       /* kubernetes forwarding conntrack pod destination rule */ ctstate RELATED,ESTABLISHED</span><br></pre></td></tr></table></figure><p>forward 完了之后会转给 iptables 的 nat 表的 POSTROUTING:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRACE: nat:POSTROUTING:rule:1 IN= OUT=cni0 SRC=192.168.199.132 DST=192.168.3.4 LEN=64 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=50995 DPT=80 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br></pre></td></tr></table></figure><p>iptables 的 POSTROUTING 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Chain POSTROUTING (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">KUBE-POSTROUTING  all  --  0.0.0.0/0            0.0.0.0/0            /* kubernetes postrouting rules */</span><br><span class="line">MASQUERADE  all  --  172.17.0.0/16        0.0.0.0/0</span><br><span class="line">RETURN     all  --  192.168.3.0/24       192.168.3.0/24</span><br><span class="line">MASQUERADE  all  --  192.168.3.0/24      !224.0.0.0/4</span><br><span class="line">RETURN     all  -- !192.168.3.0/24       192.168.3.0/24</span><br><span class="line">MASQUERADE  all  -- !192.168.3.0/24       192.168.3.0/24</span><br></pre></td></tr></table></figure><p>命中第一条，转给 KUBE-POSTROUTING</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRACE: nat:KUBE-POSTROUTING:rule:1 IN= OUT=cni0 SRC=192.168.199.132 DST=192.168.3.4 LEN=64 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=50995 DPT=80 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br></pre></td></tr></table></figure><p>iptables 的 KUBE-POSTROUTING 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Chain KUBE-POSTROUTING (1 references)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">MASQUERADE  all  --  0.0.0.0/0            0.0.0.0/0            /* kubernetes service traffic requiring SNAT */ mark match 0x4000/0x4000</span><br></pre></td></tr></table></figure><p>汇总一下，大概路线如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">--&gt; [nat]PREROUTING</span><br><span class="line">            |</span><br><span class="line">            |</span><br><span class="line">            V</span><br><span class="line">    [nat]KUBE-SERVICES</span><br><span class="line">            |</span><br><span class="line">            |</span><br><span class="line">            V</span><br><span class="line">    [nat]KUBE-NODEPORTS</span><br><span class="line">            |</span><br><span class="line">            |</span><br><span class="line">            V</span><br><span class="line">    [nat]KUBE-MARK-MASQ (打0x4000的标签)</span><br><span class="line">            |</span><br><span class="line">            |</span><br><span class="line">            V</span><br><span class="line">    [nat]KUBE-NODEPORTS</span><br><span class="line">            |</span><br><span class="line">            |</span><br><span class="line">            V               </span><br><span class="line">    [nat]KUBE-SVC-4N57TFCL4MD7ZTDA               [filter]KUBE-FORWARD -----&gt; [nat]POSTROUTING</span><br><span class="line">            |                                              ^                          |</span><br><span class="line">            |                                              |                          |</span><br><span class="line">            V                                              |                          V</span><br><span class="line">    [nat]KUBE-SEP-PJQYOXMI5CEBVECW  ------------&gt;[filter]FORWARD            [nat]KUBE-POSTROUTING</span><br><span class="line">(DNAT, 替换DST和DPT, 将物理机地址换成pod地址)</span><br></pre></td></tr></table></figure><h3 id="清除追踪规则"><a href="#清除追踪规则" class="headerlink" title="清除追踪规则"></a>清除追踪规则</h3><ul><li><p>查看规则 number</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo iptables -t raw -nL --line-number</span><br><span class="line">Chain PREROUTING (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination</span><br><span class="line">1    TRACE      tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:32741</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination</span><br><span class="line">1    TRACE      tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:32741</span><br></pre></td></tr></table></figure></li><li><p>删除规则<br>上面查到的 number 是 <code>1</code>, 这里删除第一条规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo iptables -t raw -D PREROUTING 1</span><br><span class="line">$ sudo iptables -t raw -D OUTPUT 1</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] <a href="http://www.opensourcerers.org/how-to-trace-iptables-in-rhel7-centos7/" target="_blank" rel="noopener">How to trace IPTables</a></p><p>原文：<a href="https://www.dazhuanlan.com/2019/10/22/5daee17b80349/" target="_blank" rel="noopener">https://www.dazhuanlan.com/2019/10/22/5daee17b80349/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在访问 k8s 服务时，有时会出现一直连不上的问题，我们可以通过分析 iptables 和抓包的方式观察报文是否正确到达。&lt;/p&gt;
&lt;h2 id=&quot;Iptables-跟踪&quot;&gt;&lt;a href=&quot;#Iptables-跟踪&quot; class=&quot;headerlink&quot; title=&quot;I
      
    
    </summary>
    
    
      <category term="k8s" scheme="http://liupeng0518.github.io/categories/k8s/"/>
    
    
      <category term="kubernetes" scheme="http://liupeng0518.github.io/tags/kubernetes/"/>
    
      <category term="kube-proxy" scheme="http://liupeng0518.github.io/tags/kube-proxy/"/>
    
      <category term="iptables" scheme="http://liupeng0518.github.io/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>crd</title>
    <link href="http://liupeng0518.github.io/2019/11/28/dev/k8s/crd/crd/"/>
    <id>http://liupeng0518.github.io/2019/11/28/dev/k8s/crd/crd/</id>
    <published>2019-11-28T09:47:19.000Z</published>
    <updated>2021-06-14T17:19:06.948Z</updated>
    
    <content type="html"><![CDATA[<p>operator和kubebuilder区别：<br><a href="https://github.com/operator-framework/operator-sdk/issues/1758" target="_blank" rel="noopener">https://github.com/operator-framework/operator-sdk/issues/1758</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;operator和kubebuilder区别：&lt;br&gt;&lt;a href=&quot;https://github.com/operator-framework/operator-sdk/issues/1758&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https:
      
    
    </summary>
    
    
      <category term="k8s" scheme="http://liupeng0518.github.io/categories/k8s/"/>
    
    
      <category term="k8s" scheme="http://liupeng0518.github.io/tags/k8s/"/>
    
      <category term="crd" scheme="http://liupeng0518.github.io/tags/crd/"/>
    
  </entry>
  
  <entry>
    <title>buildx -  Docker CLI plugin for extended build capabilities with BuildKit</title>
    <link href="http://liupeng0518.github.io/2019/11/21/docker/build/buildx/"/>
    <id>http://liupeng0518.github.io/2019/11/21/docker/build/buildx/</id>
    <published>2019-11-21T09:47:19.000Z</published>
    <updated>2021-06-14T17:19:06.956Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="docker" scheme="http://liupeng0518.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="http://liupeng0518.github.io/tags/docker/"/>
    
      <category term="buildx" scheme="http://liupeng0518.github.io/tags/buildx/"/>
    
  </entry>
  
  <entry>
    <title>如何制作一个基础镜像</title>
    <link href="http://liupeng0518.github.io/2019/11/13/docker/image/%E5%A6%82%E4%BD%95%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8F/"/>
    <id>http://liupeng0518.github.io/2019/11/13/docker/image/%E5%A6%82%E4%BD%95%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8F/</id>
    <published>2019-11-13T00:00:00.000Z</published>
    <updated>2021-06-14T17:19:06.956Z</updated>
    
    <content type="html"><![CDATA[<p>我们在适配特殊CPU架构的软件的时候，有时，需要构建基础镜像，标准架构dockerhub上一般都提供了官方的基础镜像；</p><p>有时我们需要个性化定制自己的基础镜像，这时也需要重新制作。这里介绍几个制作方法。</p><h1 id="Moby"><a href="#Moby" class="headerlink" title="Moby"></a>Moby</h1><h2 id="克隆docker工程"><a href="#克隆docker工程" class="headerlink" title="克隆docker工程"></a>克隆docker工程</h2><p>docker官方已经提供了制作base image的脚本，这里使用moby提供的脚本 – moby/contrib/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/moby/moby</span><br><span class="line">Cloning into &apos;moby&apos;...</span><br><span class="line">remote: Enumerating objects: 265639, done.</span><br><span class="line">remote: Total 265639 (delta 0), reused 0 (delta 0), pack-reused 265640</span><br><span class="line">Receiving objects: 99% (265640/265640), 137.75 MiB | 3.05 MiB/s, done.</span><br><span class="line">Resolving deltas: 99% (179885/179885), done.</span><br><span class="line">Checking out files: 99% (5508/5508), done.</span><br></pre></td></tr></table></figure><h2 id="确认-debootstrap-已安装"><a href="#确认-debootstrap-已安装" class="headerlink" title="确认 debootstrap 已安装"></a>确认 debootstrap 已安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@node1:~# apt install debootstrap</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">debootstrap is already the newest version (1.0.95ubuntu0.5).</span><br><span class="line">0 upgraded, 0 newly installed, 0 to remove and 90 not upgraded.</span><br></pre></td></tr></table></figure><h2 id="debian"><a href="#debian" class="headerlink" title="debian"></a>debian</h2><h3 id="mkimage-sh"><a href="#mkimage-sh" class="headerlink" title="mkimage.sh"></a>mkimage.sh</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@node1:~/peng/moby-master/contrib# ./mkimage.sh --help</span><br><span class="line">usage: mkimage.sh [-d dir] [-t tag] [--compression algo| --no-compression] script [script-args]</span><br><span class="line">   ie: mkimage.sh -t someuser/debian debootstrap --variant=minbase jessie</span><br><span class="line">       mkimage.sh -t someuser/ubuntu debootstrap --include=ubuntu-minimal --components=main,universe trusty</span><br><span class="line">       mkimage.sh -t someuser/busybox busybox-static</span><br><span class="line">       mkimage.sh -t someuser/centos:5 rinse --distribution centos-5</span><br><span class="line">       mkimage.sh -t someuser/mageia:4 mageia-urpmi --version=4</span><br><span class="line">       mkimage.sh -t someuser/mageia:4 mageia-urpmi --version=4 --mirror=http://somemirror/</span><br></pre></td></tr></table></figure><h3 id="build-the-image"><a href="#build-the-image" class="headerlink" title="build the image"></a>build the image</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@node1:~/peng/moby-master/contrib# ./mkimage.sh -t liupeng0518/debian debootstrap --variant=minbase jessie</span><br></pre></td></tr></table></figure><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><p>Verify that images is imported.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br></pre></td></tr></table></figure><p>Run a test docker instance</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -t -i --rm stafwag/debian_i386:stretch /bin/sh</span><br><span class="line"># cat /etc/debian_version </span><br><span class="line">9.8</span><br><span class="line">#</span><br></pre></td></tr></table></figure><h2 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mkimage-yum.sh centos</span><br></pre></td></tr></table></figure><h2 id="arch"><a href="#arch" class="headerlink" title="arch"></a>arch</h2><h1 id="bootstrap"><a href="#bootstrap" class="headerlink" title="*bootstrap"></a>*bootstrap</h1><p>debootstrap  –  debian系制作工具<br>febootstrap – fedora系制作工作</p><p>这里演示debootstrap如何制作</p><h2 id="debootsrap"><a href="#debootsrap" class="headerlink" title="debootsrap"></a>debootsrap</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@node1:~/peng# debootstrap --verbose --include=iputils-ping --arch amd64 bionic chroot-bionic http://ftp.ubuntu.com/ubuntu/</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">I: Configuring ca-certificates...</span><br><span class="line">I: Configuring initramfs-tools...</span><br><span class="line">I: Base system installed successfully.</span><br></pre></td></tr></table></figure><p>kylin arm64:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@node1:~/peng# debootstrap --verbose --no-check-gpg --arch arm64 4.0.2sp2-server-ft2000 juniper http://archive.kylinos.cn/kylin/KYLIN-ALL/</span><br></pre></td></tr></table></figure><h2 id="自定义镜像"><a href="#自定义镜像" class="headerlink" title="自定义镜像"></a>自定义镜像</h2><p>执行结束后，我们可以自定义镜像内容</p><p>Update <code>/etc/resolve.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@node1:~/peng/chroot-bionic# vi chroot-bionic/etc/resolv.conf</span><br><span class="line">nameserver 114.114.114.114</span><br></pre></td></tr></table></figure><p>Update <code>/etc/apt/sources.list</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@node1:~/peng/chroot-bionic# vi chroot-bionic/etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">deb http://ftp.ubuntu.com/ubuntu bionic main</span><br><span class="line">deb http://security.ubuntu.com/ubuntu bionic-security main</span><br><span class="line">deb http://ftp.ubuntu.com/ubuntu/ bionic-updates main</span><br></pre></td></tr></table></figure><p>可以chroot 到系统目录执行 <code>apt-get update</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># chroot $PWD/chroot-bionic</span><br><span class="line">/# apt update</span><br><span class="line">...</span><br><span class="line">Building dependency tree... Done</span><br></pre></td></tr></table></figure><p>and <code>apt-get upgrade</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/# apt upgrade</span><br><span class="line">/# apt install vim tzdata</span><br></pre></td></tr></table></figure><h2 id="Import镜像"><a href="#Import镜像" class="headerlink" title="Import镜像"></a>Import镜像</h2><p>切换到镜像目录 import  image.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@node1:~/peng/chroot-bionic# tar cpf - . | docker import - liupeng0518/bionic-debootstrap:v0.1</span><br></pre></td></tr></table></figure><h1 id="chroot手工制作"><a href="#chroot手工制作" class="headerlink" title="chroot手工制作"></a>chroot手工制作</h1><p>如果使用以上方式执行报错，又不想费劲解决，我们可以手工制作</p><p>建议在全新安装的minimal系统下制作</p><h2 id="复制内容"><a href="#复制内容" class="headerlink" title="复制内容"></a>复制内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">root@Kylin:~/peng# mkdir juniper</span><br><span class="line">root@Kylin:~/peng/juniper# cp -ra /dev/ /bin/  /etc/ /lib/ /root/ /run /sbin/ /usr/ /var/ /tmp .</span><br></pre></td></tr></table></figure><h2 id="创建必须目录"><a href="#创建必须目录" class="headerlink" title="创建必须目录"></a>创建必须目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@Kylin:~/peng/juniper# mkdir  proc tmp home boot  media  mnt  opt  srv  sys</span><br></pre></td></tr></table></figure><h2 id="挂在设备节点"><a href="#挂在设备节点" class="headerlink" title="挂在设备节点"></a>挂在设备节点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">root@Kylin:~/peng/juniper# mount -t proc proc ./proc</span><br><span class="line">root@Kylin:~/peng/juniper# mount -t sysfs sys ./sys</span><br><span class="line">root@Kylin:~/peng/juniper# mount -o bind /dev ./dev</span><br></pre></td></tr></table></figure><h2 id="chroot"><a href="#chroot" class="headerlink" title="chroot"></a>chroot</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@Kylin:~/peng/juniper# chroot .</span><br></pre></td></tr></table></figure><h2 id="自定义镜像-1"><a href="#自定义镜像-1" class="headerlink" title="自定义镜像"></a>自定义镜像</h2><p>这里我们可以自定义镜像内容，比如卸载不必要的安装包，减少镜像体积，修改dns、仓库内容等</p><h2 id="import镜像"><a href="#import镜像" class="headerlink" title="import镜像"></a>import镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar cpf - . | docker import - liupeng0518/juniper:v0.1</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://superuser.com/questions/165116/mount-dev-proc-sys-in-a-chroot-environment" target="_blank" rel="noopener">https://superuser.com/questions/165116/mount-dev-proc-sys-in-a-chroot-environment</a></p><p><a href="https://stafwag.github.io/blog/blog/2019/04/22/building-your-own-docker-images_part1/" target="_blank" rel="noopener">https://stafwag.github.io/blog/blog/2019/04/22/building-your-own-docker-images_part1/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们在适配特殊CPU架构的软件的时候，有时，需要构建基础镜像，标准架构dockerhub上一般都提供了官方的基础镜像；&lt;/p&gt;
&lt;p&gt;有时我们需要个性化定制自己的基础镜像，这时也需要重新制作。这里介绍几个制作方法。&lt;/p&gt;
&lt;h1 id=&quot;Moby&quot;&gt;&lt;a href=&quot;#M
      
    
    </summary>
    
    
      <category term="docker" scheme="http://liupeng0518.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="http://liupeng0518.github.io/tags/docker/"/>
    
      <category term="image" scheme="http://liupeng0518.github.io/tags/image/"/>
    
  </entry>
  
  <entry>
    <title>libivrt op</title>
    <link href="http://liupeng0518.github.io/2019/11/11/linux/%E8%99%9A%E6%8B%9F%E5%8C%96/libvirt/"/>
    <id>http://liupeng0518.github.io/2019/11/11/linux/%E8%99%9A%E6%8B%9F%E5%8C%96/libvirt/</id>
    <published>2019-11-11T10:10:39.000Z</published>
    <updated>2021-06-14T17:19:06.996Z</updated>
    
    <content type="html"><![CDATA[<h2 id="libvirt-mactap设备开启multicast"><a href="#libvirt-mactap设备开启multicast" class="headerlink" title="libvirt mactap设备开启multicast"></a>libvirt mactap设备开启multicast</h2><p>edit lbivirt xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">interface</span> <span class="attr">type</span>=<span class="string">'direct'</span> <span class="attr">trustGuestRxFilters</span>=<span class="string">'yes'</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://superuser.com/questions/944678/how-to-configure-macvtap-to-let-it-pass-multicast-packet-correctly" target="_blank" rel="noopener">https://superuser.com/questions/944678/how-to-configure-macvtap-to-let-it-pass-multicast-packet-correctly</a></p><h2 id="virsh"><a href="#virsh" class="headerlink" title="virsh"></a>virsh</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;libvirt-mactap设备开启multicast&quot;&gt;&lt;a href=&quot;#libvirt-mactap设备开启multicast&quot; class=&quot;headerlink&quot; title=&quot;libvirt mactap设备开启multicast&quot;&gt;&lt;/a&gt;libvi
      
    
    </summary>
    
    
      <category term="linux" scheme="http://liupeng0518.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://liupeng0518.github.io/tags/linux/"/>
    
      <category term="libvirt" scheme="http://liupeng0518.github.io/tags/libvirt/"/>
    
  </entry>
  
  <entry>
    <title>构建ppc64le架构docker</title>
    <link href="http://liupeng0518.github.io/2019/11/10/docker/build/how%20to%20build%20ppc%20docker/"/>
    <id>http://liupeng0518.github.io/2019/11/10/docker/build/how%20to%20build%20ppc%20docker/</id>
    <published>2019-11-10T00:00:00.000Z</published>
    <updated>2021-06-14T17:19:06.956Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>clone docker v18.09.8</p></li><li><p>修改golang环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/root/docker-ce-18.09.8/components/packaging/Makefile</span><br><span class="line"></span><br><span class="line">/root/docker-ce-18.09.8/components/packaging/rpm/Makefile</span><br></pre></td></tr></table></figure></li></ol><p>文件中O_VERSION:=1.12.5（已docker pull下的ppc版本golang镜像）</p><ol start="3"><li>修改SPECS</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/docker-ce-18.09.8/components/packaging/rpm/SPECS</span><br></pre></td></tr></table></figure><p>修改Requires: containerd.io &gt;= 1.2.2-3</p><p>为 Requires: containerd &gt;= 1.2.2-3</p><ol start="4"><li>构建<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make rpm</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;clone docker v18.09.8&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改golang环境&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
    
      <category term="docker" scheme="http://liupeng0518.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="http://liupeng0518.github.io/tags/docker/"/>
    
      <category term="linux" scheme="http://liupeng0518.github.io/tags/linux/"/>
    
      <category term="ppc" scheme="http://liupeng0518.github.io/tags/ppc/"/>
    
  </entry>
  
  <entry>
    <title>capture packets</title>
    <link href="http://liupeng0518.github.io/2019/10/30/k8s/Network/capture%20packets/"/>
    <id>http://liupeng0518.github.io/2019/10/30/k8s/Network/capture%20packets/</id>
    <published>2019-10-30T09:47:19.000Z</published>
    <updated>2021-06-14T17:19:06.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="network-namespace"><a href="#network-namespace" class="headerlink" title="network namespace"></a>network namespace</h1><p>我们在使用 openstack 的时候，会用到<code>ip netns</code>命令进到docker的network namespace中抓包排查问题，在k8s中我们也可以使用类似的方式，不过要使用 <code>ip netns</code> 稍微复杂点，得手动连接容器的 ns id到/var/run/netns下（没有自动）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pid=$(docker inspect -f &apos;&#123;&#123;.State.Pid&#125;&#125;&apos; $&#123;container_id&#125;)</span><br><span class="line"></span><br><span class="line">mkdir -p /var/run/netns/</span><br><span class="line"></span><br><span class="line">ln -sfT /proc/$pid/ns/net /var/run/netns/$container_id</span><br><span class="line"></span><br><span class="line">ip netns exec &quot;$&#123;container_id&#125;&quot; ip -s link show eth0</span><br></pre></td></tr></table></figure></p><p>不过我们可以使用nsenter命令，pod内抓包排查问题基本思路：</p><ol><li>pod副本数缩减为1</li><li><p>查看pod id</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n &lt;namespace&gt; describe pod &lt;pod&gt; | grep -A10 &quot;^Containers:&quot; | grep -Eo &apos;docker://.*$&apos; | head -n 1 | sed &apos;s/docker:\/\/\(.*\)$/\1/&apos;</span><br></pre></td></tr></table></figure></li><li><p>获得容器进程的 pid</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect -f &#123;&#123;.State.Pid&#125;&#125; &lt;container&gt;</span><br></pre></td></tr></table></figure></li><li><p>进入容器的network namespace</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nsenter -n --target &lt;PID&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用tcpdump等工具抓包分析</p></li></ol><h1 id="some-namespaces"><a href="#some-namespaces" class="headerlink" title="some namespaces"></a>some namespaces</h1><p>通常连接Docker容器并与其进行交互有四种方法。详情见：<a href="https://github.com/berresch/Docker-Enter-Demo" target="_blank" rel="noopener">Docker Enter Demo</a>，下面摘录nsenter连接的方式。</p><p>查看是否安装nsenter<br>[root@localhost ~]# whereis nsenter<br>nsenter: /usr/bin/nsenter /usr/share/man/man1/nsenter.1.gz<br>　　如果没安装可创建install.sh，并执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">curl https://www.kernel.org/pub/linux/utils/util-linux/v2.24/util-linux-2.24.tar.gz | tar -zxf-</span><br><span class="line">cd util-linux-2.24</span><br><span class="line">./configure --without-ncurses</span><br><span class="line">make nsenter</span><br><span class="line">sudo cp nsenter /usr/local/bin</span><br><span class="line">cd .. &amp;&amp; rm -rf util-linux-2.24</span><br></pre></td></tr></table></figure><p>方式一：创建docker-enter并置于$PATH下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">if [ -e $(dirname &quot;$0&quot;)/nsenter ]; then</span><br><span class="line">  # with boot2docker, nsenter is not in the PATH but it is in the same folder</span><br><span class="line">  NSENTER=$(dirname &quot;$0&quot;)/nsenter</span><br><span class="line">else</span><br><span class="line">  NSENTER=nsenter</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$1&quot; ]; then</span><br><span class="line">  echo &quot;Usage: `basename &quot;$0&quot;` CONTAINER [COMMAND [ARG]...]&quot;</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">  echo &quot;Enters the Docker CONTAINER and executes the specified COMMAND.&quot;</span><br><span class="line">  echo &quot;If COMMAND is not specified, runs an interactive shell in CONTAINER.&quot;</span><br><span class="line">else</span><br><span class="line">  PID=$(docker inspect --format &quot;&#123;&#123;.State.Pid&#125;&#125;&quot; &quot;$1&quot;)</span><br><span class="line">  if [ -z &quot;$PID&quot; ]; then</span><br><span class="line">    exit 1</span><br><span class="line">  fi</span><br><span class="line">  shift</span><br><span class="line"></span><br><span class="line">  OPTS=&quot;--target $PID --mount --uts --ipc --net --pid --&quot;</span><br><span class="line"></span><br><span class="line">  if [ -z &quot;$1&quot; ]; then</span><br><span class="line">    # No command given.</span><br><span class="line">    # Use su to clear all host environment variables except for TERM,</span><br><span class="line">    # initialize the environment variables HOME, SHELL, USER, LOGNAME, PATH,</span><br><span class="line">    # and start a login shell.</span><br><span class="line">#&quot;$NSENTER&quot; $OPTS su - root</span><br><span class="line">&quot;$NSENTER&quot; $OPTS /bin/su - root</span><br><span class="line">  else</span><br><span class="line">    # Use env to clear all host environment variables.</span><br><span class="line">    &quot;$NSENTER&quot; $OPTS env --ignore-environment -- &quot;$@&quot;</span><br><span class="line">  fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><p>　　常见问题：nsenter: failed to execute su: No such file or directory</p><p>　　这是由于容器中的PATH 路径问题，使用/bin/su 即可。</p><p>方式二：也可以将其放在.bashrc中，就可以方便的使用了。（运行source ./bashrc不重启生效）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#docker</span><br><span class="line">#export DOCKER_HOST=tcp://localhost:4243</span><br><span class="line">alias docker-pid=&quot;sudo docker inspect --format &apos;&#123;&#123;.State.Pid&#125;&#125;&apos;&quot;</span><br><span class="line">alias docker-ip=&quot;sudo docker inspect --format &apos;&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;&apos;&quot;</span><br><span class="line"></span><br><span class="line">#the implementation refs from https://github.com/jpetazzo/nsenter/blob/master/docker-enter</span><br><span class="line">function docker-enter() &#123;</span><br><span class="line">    if [ -e $(dirname &quot;$0&quot;)/nsenter ]; then</span><br><span class="line">                # with boot2docker, nsenter is not in the PATH but it is in the same folder</span><br><span class="line">        NSENTER=$(dirname &quot;$0&quot;)/nsenter</span><br><span class="line">    else</span><br><span class="line">        NSENTER=nsenter</span><br><span class="line">    fi</span><br><span class="line">    [ -z &quot;$NSENTER&quot; ] &amp;&amp; echo &quot;WARN Cannot find nsenter&quot; &amp;&amp; return</span><br><span class="line"></span><br><span class="line">    if [ -z &quot;$1&quot; ]; then</span><br><span class="line">        echo &quot;Usage: `basename &quot;$0&quot;` CONTAINER [COMMAND [ARG]...]&quot;</span><br><span class="line">        echo &quot;&quot;</span><br><span class="line">        echo &quot;Enters the Docker CONTAINER and executes the specified COMMAND.&quot;</span><br><span class="line">        echo &quot;If COMMAND is not specified, runs an interactive shell in CONTAINER.&quot;</span><br><span class="line">    else</span><br><span class="line">        PID=$(sudo docker inspect --format &quot;&#123;&#123;.State.Pid&#125;&#125;&quot; &quot;$1&quot;)</span><br><span class="line">        if [ -z &quot;$PID&quot; ]; then</span><br><span class="line">            echo &quot;WARN Cannot find the given container&quot;</span><br><span class="line">            return</span><br><span class="line">        fi</span><br><span class="line">        shift</span><br><span class="line">    </span><br><span class="line">        OPTS=&quot;--target $PID --mount --uts --ipc --net --pid&quot;</span><br><span class="line">    </span><br><span class="line">        if [ -z &quot;$1&quot; ]; then</span><br><span class="line">            # No command given.</span><br><span class="line">            # Use su to clear all host environment variables except for TERM,</span><br><span class="line">            # initialize the environment variables HOME, SHELL, USER, LOGNAME, PATH,</span><br><span class="line">            # and start a login shell.</span><br><span class="line">            #sudo $NSENTER &quot;$OPTS&quot; su - root</span><br><span class="line">            sudo $NSENTER --target $PID --mount --uts --ipc --net --pid su - root</span><br><span class="line">        else</span><br><span class="line">            # Use env to clear all host environment variables.</span><br><span class="line">            sudo $NSENTER --target $PID --mount --uts --ipc --net --pid env -i $@</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　执行：source ./bashrc，让修改生效。</p><p>　　进入容器：</p><p>docker-enter 容器ID</p><p>参考：</p><p><a href="https://stackoverflow.com/questions/31265993/docker-networking-namespace-not-visible-in-ip-netns-list" target="_blank" rel="noopener">https://stackoverflow.com/questions/31265993/docker-networking-namespace-not-visible-in-ip-netns-list</a></p><p><a href="https://github.com/berresch/Docker-Enter-Demo" target="_blank" rel="noopener">https://github.com/berresch/Docker-Enter-Demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;network-namespace&quot;&gt;&lt;a href=&quot;#network-namespace&quot; class=&quot;headerlink&quot; title=&quot;network namespace&quot;&gt;&lt;/a&gt;network namespace&lt;/h1&gt;&lt;p&gt;我们在使用 open
      
    
    </summary>
    
    
      <category term="k8s" scheme="http://liupeng0518.github.io/categories/k8s/"/>
    
    
      <category term="network" scheme="http://liupeng0518.github.io/tags/network/"/>
    
      <category term="k8s" scheme="http://liupeng0518.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>operator</title>
    <link href="http://liupeng0518.github.io/2019/10/20/dev/k8s/crd/operator/"/>
    <id>http://liupeng0518.github.io/2019/10/20/dev/k8s/crd/operator/</id>
    <published>2019-10-20T16:47:19.000Z</published>
    <updated>2021-06-14T17:19:06.948Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="k8s" scheme="http://liupeng0518.github.io/categories/k8s/"/>
    
    
      <category term="k8s" scheme="http://liupeng0518.github.io/tags/k8s/"/>
    
      <category term="operator" scheme="http://liupeng0518.github.io/tags/operator/"/>
    
  </entry>
  
  <entry>
    <title>kubectl exec 是如何工作的</title>
    <link href="http://liupeng0518.github.io/2019/10/18/k8s/op/kubectl%20exec%20%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/"/>
    <id>http://liupeng0518.github.io/2019/10/18/k8s/op/kubectl%20exec%20%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/</id>
    <published>2019-10-18T17:13:01.000Z</published>
    <updated>2021-06-14T17:19:06.988Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://erkanerol.github.io/post/how-kubectl-exec-works/" target="_blank" rel="noopener">How does ‘kubectl exec’ work?</a></p><p>作者：<a href="https://twitter.com/erkan_erol_" target="_blank" rel="noopener">Erkan Erol</a></p><p>上周五，一个同事问了我一个问题——如何使用 client-go 在 Pod 中执行命令。我答不出来，而且注意到我从来没想过 <code>kubectl exec</code> 的实现机制。我对这个问题有一点认识，但又不是很确定。我记下了这个题目，进行了一番探索，在阅读了大量博客、文档和代码之后，收获了很多知识。本文中我会分享这个过程中的理解和发现。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>我使用 <a href="https://github.com/ecomm-integration-ballerina/kubernetes-cluster" target="_blank" rel="noopener">https://github.com/ecomm-integration-ballerina/kubernetes-cluster</a> 中的工具在我的 Macbook 上创建 Kubernetes 集群。缺省配置不允许运行 <code>kubectl exec</code>，我在 Kubelet 配置中修改了 IP 地址，具体原因参见博客：<a href="https://medium.com/@joatmon08/playing-with-kubeadm-in-vagrant-machines-part-2-bac431095706" target="_blank" rel="noopener">Playing with kubeadm in Vagrant Machines</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Any machine = my MacBook</span><br><span class="line">IP of master node = 192.168.205.10</span><br><span class="line">IP of worker node = 192.168.205.11</span><br><span class="line">API server port = 6443</span><br></pre></td></tr></table></figure><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p><img src="https://blog.fleeto.us/post/how-kubectl-exec-works/images/components.png" alt="components"></p><ul><li><code>kubectl exec</code> 进程：在我们运行 <code>kubectl exec</code> 时，会启动一个进程。可以在任何一台能够访问到 Kubernetes API Server 的机器上运行该命令。</li><li><code>api-server</code>：运行在 Master 上，提供开放的 Kubernetes API，它是 Kubernetes 控制平面的前端。</li><li><code>kubelet</code>：在集群所有节点上都会运行这个进程，它负责让容器以 Pod 的模式运行。</li><li>容器运行时：负责运行容器，例如 Docker、cri-o、containerd…</li><li>内核：工作节点上的操作系统内核，负责管理进程。</li><li>目标容器：组成 Pod 的容器，在工作节点上运行。</li></ul><h2 id="探索"><a href="#探索" class="headerlink" title="探索"></a>探索</h2><h3 id="客户端的活动"><a href="#客户端的活动" class="headerlink" title="客户端的活动"></a>客户端的活动</h3><p>在缺省命名空间中创建一个 Pod：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># kubectl run exec-test-nginx --image=nginx</span><br></pre></td></tr></table></figure><p>执行 <code>sleep 5000</code>，来进行观察：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ps -ef |grep kubectl</span><br><span class="line">501  8507  8409   0  7:19PM ttys000    0:00.13 kubectl exec -it exec-test-nginx-6558988d5-fgxgg -- sh</span><br></pre></td></tr></table></figure><p>检查该进程的网络活动，会看到连接到 API Server 的通信（192.168.205.10.6443）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -atnv |grep 8507</span><br><span class="line">tcp4       0      0  192.168.205.1.51673    192.168.205.10.6443    ESTABLISHED 131072 131768   8507      0 0x0102 0x00000020</span><br><span class="line">tcp4       0      0  192.168.205.1.51672    192.168.205.10.6443    ESTABLISHED 131072 131768   8507      0 0x0102 0x00000028</span><br></pre></td></tr></table></figure><p>再看看代码。<code>kubectl</code> 发起了一个包含 <code>exec</code> 子资源的 POST 请求：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">req := restClient.Post().</span><br><span class="line">        Resource(<span class="string">"pods"</span>).</span><br><span class="line">        Name(pod.Name).</span><br><span class="line">        Namespace(pod.Namespace).</span><br><span class="line">        SubResource(<span class="string">"exec"</span>)</span><br><span class="line">req.VersionedParams(&amp;corev1.PodExecOptions&#123;</span><br><span class="line">        Container: containerName,</span><br><span class="line">        Command:   p.Command,</span><br><span class="line">        Stdin:     p.Stdin,</span><br><span class="line">        Stdout:    p.Out != <span class="literal">nil</span>,</span><br><span class="line">        Stderr:    p.ErrOut != <span class="literal">nil</span>,</span><br><span class="line">        TTY:       t.Raw,</span><br><span class="line">&#125;, scheme.ParameterCodec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p.Executor.Execute(<span class="string">"POST"</span>, req.URL(), p.Config, p.In, p.Out, p.ErrOut, t.Raw, sizeQueue)</span><br></pre></td></tr></table></figure><p><img src="https://blog.fleeto.us/post/how-kubectl-exec-works/images/rest-request.png" alt="rest-request.png"></p><h3 id="Master-上的活动"><a href="#Master-上的活动" class="headerlink" title="Master 上的活动"></a>Master 上的活动</h3><p>在 API Server 端当然也能观察到请求的情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handler.go:143] kube-apiserver: POST &quot;/api/v1/namespaces/default/pods/exec-test-nginx-6558988d5-fgxgg/exec&quot; satisfied by gorestful with webservice /api/v1</span><br><span class="line">upgradeaware.go:261] Connecting to backend proxy (intercepting redirects) https://192.168.205.11:10250/exec/default/exec-test-nginx-6558988d5-fgxgg/exec-test-nginx?command=sh&amp;input=1&amp;output=1&amp;tty=1</span><br><span class="line">Headers: map[Connection:[Upgrade] Content-Length:[0] Upgrade:[SPDY/3.1] User-Agent:[kubectl/v1.12.10 (darwin/amd64) kubernetes/e3c1340] X-Forwarded-For:[192.168.205.1] X-Stream-Protocol-Version:[v4.channel.k8s.io v3.channel.k8s.io v2.channel.k8s.io channel.k8s.io]]</span><br></pre></td></tr></table></figure><blockquote><p>HTTP 请求中包含了协议升级的请求，SPDY 允许在单个 TCP 连接上复用独立的 stdin/stdout/stderr/spdy-error 流。</p></blockquote><p>API Server 收到请求，绑定到 <code>PodExecOptions</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PodExecOptions is the query options to a Pod's remote exec call</span></span><br><span class="line"><span class="keyword">type</span> PodExecOptions <span class="keyword">struct</span> &#123;</span><br><span class="line">        metav1.TypeMeta</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Stdin if true indicates that stdin is to be redirected for the exec call</span></span><br><span class="line">        Stdin <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Stdout if true indicates that stdout is to be redirected for the exec call</span></span><br><span class="line">        Stdout <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Stderr if true indicates that stderr is to be redirected for the exec call</span></span><br><span class="line">        Stderr <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// TTY if true indicates that a tty will be allocated for the exec call</span></span><br><span class="line">        TTY <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Container in which to execute the command.</span></span><br><span class="line">        Container <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Command is the remote command to execute; argv array; not executed within a shell.</span></span><br><span class="line">        Command []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了执行必要的动作，API Server 需要知道联系地址：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ExecLocation returns the exec URL for a pod container. If opts.Container is blank</span></span><br><span class="line"><span class="comment">// and only one container is present in the pod, that container is used.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExecLocation</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        getter ResourceGetter,</span></span></span><br><span class="line"><span class="function"><span class="params">        connInfo client.ConnectionInfoGetter,</span></span></span><br><span class="line"><span class="function"><span class="params">        ctx context.Context,</span></span></span><br><span class="line"><span class="function"><span class="params">        name <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        opts *api.PodExecOptions,</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> <span class="params">(*url.URL, http.RoundTripper, error)</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> streamLocation(getter, connInfo, ctx, name, opts, opts.Container, <span class="string">"exec"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然这个端点是来自 Node：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nodeName := types.NodeName(pod.Spec.NodeName)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(nodeName) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="comment">// If pod has not been assigned a host, return an empty location</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, errors.NewBadRequest(fmt.Sprintf(<span class="string">"pod %s does not have a host assigned"</span>, name))</span><br><span class="line">&#125;</span><br><span class="line">nodeInfo, err := connInfo.GetConnectionInfo(ctx, nodeName)</span><br></pre></td></tr></table></figure><p>Kubelet 提供了一个端口，API Server 可以进行连接：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GetConnectionInfo retrieves connection info from the status of a Node API object.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k *NodeConnectionInfoGetter)</span> <span class="title">GetConnectionInfo</span><span class="params">(ctx context.Context, nodeName types.NodeName)</span> <span class="params">(*ConnectionInfo, error)</span></span> &#123;</span><br><span class="line">        node, err := k.nodes.Get(ctx, <span class="keyword">string</span>(nodeName), metav1.GetOptions&#123;&#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Find a kubelet-reported address, using preferred address type</span></span><br><span class="line">        host, err := nodeutil.GetPreferredNodeAddress(node, k.preferredAddressTypes)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use the kubelet-reported port, if present</span></span><br><span class="line">        port := <span class="keyword">int</span>(node.Status.DaemonEndpoints.KubeletEndpoint.Port)</span><br><span class="line">        <span class="keyword">if</span> port &lt;= <span class="number">0</span> &#123;</span><br><span class="line">                port = k.defaultPort</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &amp;ConnectionInfo&#123;</span><br><span class="line">                Scheme:    k.scheme,</span><br><span class="line">                Hostname:  host,</span><br><span class="line">                Port:      strconv.Itoa(port),</span><br><span class="line">                Transport: k.transport,</span><br><span class="line">        &#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://kubernetes.io/docs/concepts/architecture/master-node-communication/#apiserver-to-kubelet" target="_blank" rel="noopener">API Server to Kubelet</a> Kubelet 开放的是一个 HTTPS 端点。缺省情况下 API Server 是不会验证 Kubelet 的服务证书的，这样这个连接就存在遭到中间人攻击的隐患，在不受信任的或者公开的网络上运行是不安全的。</p></blockquote><p>现在，API Server 得到了端点地址，打开连接：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Connect returns a handler for the pod exec proxy</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *ExecREST)</span> <span class="title">Connect</span><span class="params">(ctx context.Context, name <span class="keyword">string</span>, opts runtime.Object, responder rest.Responder)</span> <span class="params">(http.Handler, error)</span></span> &#123;</span><br><span class="line">        execOpts, ok := opts.(*api.PodExecOptions)</span><br><span class="line">        <span class="keyword">if</span> !ok &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"invalid options object: %#v"</span>, opts)</span><br><span class="line">        &#125;</span><br><span class="line">        location, transport, err := pod.ExecLocation(r.Store, r.KubeletConn, ctx, name, execOpts)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newThrottledUpgradeAwareProxyHandler(location, transport, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>, responder), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看 Master 上发生了什么。</p><p>首先确定一下工作节点的 IP，这里是 <code>192.168.205.11</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get nodes k8s-node-1 -o wide</span><br><span class="line">NAME         STATUS   ROLES    AGE   VERSION   INTERNAL-IP      EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME</span><br><span class="line">k8s-node-1   Ready    &lt;none&gt;   9h    v1.15.3   192.168.205.11   &lt;none&gt;        Ubuntu 16.04.6 LTS   4.4.0-159-generic   docker://17.3.3</span><br></pre></td></tr></table></figure><p>然后查找 Kubelet 的端口号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get nodes k8s-node-1 -o jsonpath=&apos;&#123;.status.daemonEndpoints.kubeletEndpoint&#125;&apos;</span><br><span class="line">map[Port:10250]</span><br></pre></td></tr></table></figure><p>接下来看看是不是存在到工作节点的连接？看到连接之后，如果杀掉 <code>exec</code> 进程，这个连接就会消失。这说明这个连接是 API Server 响应 <code>exec</code> 请求而生成的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -atn |grep 192.168.205.11</span><br><span class="line">tcp        0      0 192.168.205.10:37870    192.168.205.11:10250    ESTABLISHED</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="https://blog.fleeto.us/post/how-kubectl-exec-works/images/api-server-to-kubelet.png" alt="api-server-to-kubelet.png"></p><p>目前为止，kubectl 和 API Server 之间的连接还存在，并且 API Server 和 Kubelet 之间也建立了连接。</p><h3 id="工作节点上的活动"><a href="#工作节点上的活动" class="headerlink" title="工作节点上的活动"></a>工作节点上的活动</h3><p>接下来我们连接到工作节点上，看看这里发生了什么。</p><p>首先我们同样能看到连接，第二行显示了 Master 的地址：<code>192.168.205.10</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// worker node</span><br><span class="line">$ netstat -atn |grep 10250</span><br><span class="line">tcp6       0      0 :::10250                :::*                    LISTEN</span><br><span class="line">tcp6       0      0 192.168.205.11:10250    192.168.205.10:37870    ESTABLISHED</span><br></pre></td></tr></table></figure><p>我们的 sleep 命令呢？也可以看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// worker node</span><br><span class="line">$ ps -afx</span><br><span class="line">...</span><br><span class="line">31463 ?        Sl     0:00      \_ docker-containerd-shim 7d974065bbb3107074ce31c51f5ef40aea8dcd535ae11a7b8f2dd180b8ed583a /var/run/docker/libcontainerd/7d974065bbb3107074ce31c51</span><br><span class="line">31478 pts/0    Ss     0:00          \_ sh</span><br><span class="line">31485 pts/0    S+     0:00              \_ sleep 5000</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Kubelet 是如何做到的？</p><p>Kubelet 提供了一个服务端口，用来响应 API Server 的请求：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Server is the library interface to serve the stream requests.</span></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">interface</span> &#123;</span><br><span class="line">        http.Handler</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the serving URL for the requests.</span></span><br><span class="line">        <span class="comment">// Requests must not be nil. Responses may be nil iff an error is returned.</span></span><br><span class="line">        GetExec(*runtimeapi.ExecRequest) (*runtimeapi.ExecResponse, error)</span><br><span class="line">        GetAttach(req *runtimeapi.AttachRequest) (*runtimeapi.AttachResponse, error)</span><br><span class="line">        GetPortForward(*runtimeapi.PortForwardRequest) (*runtimeapi.PortForwardResponse, error)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start the server.</span></span><br><span class="line">        <span class="comment">// addr is the address to serve on (address:port) stayUp indicates whether the server should</span></span><br><span class="line">        <span class="comment">// listen until Stop() is called, or automatically stop after all expected connections are</span></span><br><span class="line">        <span class="comment">// closed. Calling Get&#123;Exec,Attach,PortForward&#125; increments the expected connection count.</span></span><br><span class="line">        <span class="comment">// Function does not return until the server is stopped.</span></span><br><span class="line">        Start(stayUp <span class="keyword">bool</span>) error</span><br><span class="line">        <span class="comment">// Stop the server, and terminate any open connections.</span></span><br><span class="line">        Stop() error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Kubelet 为 exec 请求生成一个响应端点：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *server)</span> <span class="title">GetExec</span><span class="params">(req *runtimeapi.ExecRequest)</span> <span class="params">(*runtimeapi.ExecResponse, error)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err := validateExecRequest(req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">        &#125;</span><br><span class="line">        token, err := s.cache.Insert(req)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &amp;runtimeapi.ExecResponse&#123;</span><br><span class="line">                Url: s.buildURL(<span class="string">"exec"</span>, token),</span><br><span class="line">        &#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它返回的不是命令结果，而是一个用于通信的端点：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ExecResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">        <span class="comment">// Fully qualified URL of the exec streaming server.</span></span><br><span class="line">        Url                  <span class="keyword">string</span>   <span class="string">`protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`</span></span><br><span class="line">        XXX_NoUnkeyedLiteral <span class="keyword">struct</span>&#123;&#125; <span class="string">`json:"-"`</span></span><br><span class="line">        XXX_sizecache        <span class="keyword">int32</span>    <span class="string">`json:"-"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Kubelet 实现了一个 CRI 规范中的 <code>RuntimeServiceClient</code> 接口：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.</span></span><br><span class="line"><span class="keyword">type</span> RuntimeServiceClient <span class="keyword">interface</span> &#123;</span><br><span class="line">        <span class="comment">// Version returns the runtime name, runtime version, and runtime API version.</span></span><br><span class="line">        Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)</span><br><span class="line">        <span class="comment">// RunPodSandbox creates and starts a pod-level sandbox. Runtimes must ensure</span></span><br><span class="line">        <span class="comment">// the sandbox is in the ready state on success.</span></span><br><span class="line">        RunPodSandbox(ctx context.Context, in *RunPodSandboxRequest, opts ...grpc.CallOption) (*RunPodSandboxResponse, error)</span><br><span class="line">        <span class="comment">// StopPodSandbox stops any running process that is part of the sandbox and</span></span><br><span class="line">        <span class="comment">// reclaims network resources (e.g., IP addresses) allocated to the sandbox.</span></span><br><span class="line">        <span class="comment">// If there are any running containers in the sandbox, they must be forcibly</span></span><br><span class="line">        <span class="comment">// terminated.</span></span><br><span class="line">        <span class="comment">// This call is idempotent, and must not return an error if all relevant</span></span><br><span class="line">        <span class="comment">// resources have already been reclaimed. kubelet will call StopPodSandbox</span></span><br><span class="line">        <span class="comment">// at least once before calling RemovePodSandbox. It will also attempt to</span></span><br><span class="line">        <span class="comment">// reclaim resources eagerly, as soon as a sandbox is not needed. Hence,</span></span><br><span class="line">        <span class="comment">// multiple StopPodSandbox calls are expected.</span></span><br><span class="line">        StopPodSandbox(ctx context.Context, in *StopPodSandboxRequest, opts ...grpc.CallOption) (*StopPodSandboxResponse, error)</span><br><span class="line">        <span class="comment">// RemovePodSandbox removes the sandbox. If there are any running containers</span></span><br><span class="line">        <span class="comment">// in the sandbox, they must be forcibly terminated and removed.</span></span><br><span class="line">        <span class="comment">// This call is idempotent, and must not return an error if the sandbox has</span></span><br><span class="line">        <span class="comment">// already been removed.</span></span><br><span class="line">        RemovePodSandbox(ctx context.Context, in *RemovePodSandboxRequest, opts ...grpc.CallOption) (*RemovePodSandboxResponse, error)</span><br><span class="line">        <span class="comment">// PodSandboxStatus returns the status of the PodSandbox. If the PodSandbox is not</span></span><br><span class="line">        <span class="comment">// present, returns an error.</span></span><br><span class="line">        PodSandboxStatus(ctx context.Context, in *PodSandboxStatusRequest, opts ...grpc.CallOption) (*PodSandboxStatusResponse, error)</span><br><span class="line">        <span class="comment">// ListPodSandbox returns a list of PodSandboxes.</span></span><br><span class="line">        ListPodSandbox(ctx context.Context, in *ListPodSandboxRequest, opts ...grpc.CallOption) (*ListPodSandboxResponse, error)</span><br><span class="line">        <span class="comment">// CreateContainer creates a new container in specified PodSandbox</span></span><br><span class="line">        CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error)</span><br><span class="line">        <span class="comment">// StartContainer starts the container.</span></span><br><span class="line">        StartContainer(ctx context.Context, in *StartContainerRequest, opts ...grpc.CallOption) (*StartContainerResponse, error)</span><br><span class="line">        <span class="comment">// StopContainer stops a running container with a grace period (i.e., timeout).</span></span><br><span class="line">        <span class="comment">// This call is idempotent, and must not return an error if the container has</span></span><br><span class="line">        <span class="comment">// already been stopped.</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> what must the runtime do after the grace period is reached?</span></span><br><span class="line">        StopContainer(ctx context.Context, in *StopContainerRequest, opts ...grpc.CallOption) (*StopContainerResponse, error)</span><br><span class="line">        <span class="comment">// RemoveContainer removes the container. If the container is running, the</span></span><br><span class="line">        <span class="comment">// container must be forcibly removed.</span></span><br><span class="line">        <span class="comment">// This call is idempotent, and must not return an error if the container has</span></span><br><span class="line">        <span class="comment">// already been removed.</span></span><br><span class="line">        RemoveContainer(ctx context.Context, in *RemoveContainerRequest, opts ...grpc.CallOption) (*RemoveContainerResponse, error)</span><br><span class="line">        <span class="comment">// ListContainers lists all containers by filters.</span></span><br><span class="line">        ListContainers(ctx context.Context, in *ListContainersRequest, opts ...grpc.CallOption) (*ListContainersResponse, error)</span><br><span class="line">        <span class="comment">// ContainerStatus returns status of the container. If the container is not</span></span><br><span class="line">        <span class="comment">// present, returns an error.</span></span><br><span class="line">        ContainerStatus(ctx context.Context, in *ContainerStatusRequest, opts ...grpc.CallOption) (*ContainerStatusResponse, error)</span><br><span class="line">        <span class="comment">// UpdateContainerResources updates ContainerConfig of the container.</span></span><br><span class="line">        UpdateContainerResources(ctx context.Context, in *UpdateContainerResourcesRequest, opts ...grpc.CallOption) (*UpdateContainerResourcesResponse, error)</span><br><span class="line">        <span class="comment">// ReopenContainerLog asks runtime to reopen the stdout/stderr log file</span></span><br><span class="line">        <span class="comment">// for the container. This is often called after the log file has been</span></span><br><span class="line">        <span class="comment">// rotated. If the container is not running, container runtime can choose</span></span><br><span class="line">        <span class="comment">// to either create a new log file and return nil, or return an error.</span></span><br><span class="line">        <span class="comment">// Once it returns error, new container log file MUST NOT be created.</span></span><br><span class="line">        ReopenContainerLog(ctx context.Context, in *ReopenContainerLogRequest, opts ...grpc.CallOption) (*ReopenContainerLogResponse, error)</span><br><span class="line">        <span class="comment">// ExecSync runs a command in a container synchronously.</span></span><br><span class="line">        ExecSync(ctx context.Context, in *ExecSyncRequest, opts ...grpc.CallOption) (*ExecSyncResponse, error)</span><br><span class="line">        <span class="comment">// Exec prepares a streaming endpoint to execute a command in the container.</span></span><br><span class="line">        Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error)</span><br><span class="line">        <span class="comment">// Attach prepares a streaming endpoint to attach to a running container.</span></span><br><span class="line">        Attach(ctx context.Context, in *AttachRequest, opts ...grpc.CallOption) (*AttachResponse, error)</span><br><span class="line">        <span class="comment">// PortForward prepares a streaming endpoint to forward ports from a PodSandbox.</span></span><br><span class="line">        PortForward(ctx context.Context, in *PortForwardRequest, opts ...grpc.CallOption) (*PortForwardResponse, error)</span><br><span class="line">        <span class="comment">// ContainerStats returns stats of the container. If the container does not</span></span><br><span class="line">        <span class="comment">// exist, the call returns an error.</span></span><br><span class="line">        ContainerStats(ctx context.Context, in *ContainerStatsRequest, opts ...grpc.CallOption) (*ContainerStatsResponse, error)</span><br><span class="line">        <span class="comment">// ListContainerStats returns stats of all running containers.</span></span><br><span class="line">        ListContainerStats(ctx context.Context, in *ListContainerStatsRequest, opts ...grpc.CallOption) (*ListContainerStatsResponse, error)</span><br><span class="line">        <span class="comment">// UpdateRuntimeConfig updates the runtime configuration based on the given request.</span></span><br><span class="line">        UpdateRuntimeConfig(ctx context.Context, in *UpdateRuntimeConfigRequest, opts ...grpc.CallOption) (*UpdateRuntimeConfigResponse, error)</span><br><span class="line">        <span class="comment">// Status returns the status of the runtime.</span></span><br><span class="line">        Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 gRPC 通过 CRI 调用方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> runtimeServiceClient <span class="keyword">struct</span> &#123;</span><br><span class="line">        cc *grpc.ClientConn</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *runtimeServiceClient)</span> <span class="title">Exec</span><span class="params">(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption)</span> <span class="params">(*ExecResponse, error)</span></span> &#123;</span><br><span class="line">        out := <span class="built_in">new</span>(ExecResponse)</span><br><span class="line">        err := c.cc.Invoke(ctx, <span class="string">"/runtime.v1alpha2.RuntimeService/Exec"</span>, in, out, opts...)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> out, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>容器运行时负责实现 <code>RuntimeServiceServer</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RuntimeServiceServer is the server API for RuntimeService service.</span></span><br><span class="line"><span class="keyword">type</span> RuntimeServiceServer <span class="keyword">interface</span> &#123;</span><br><span class="line">        <span class="comment">// Version returns the runtime name, runtime version, and runtime API version.</span></span><br><span class="line">        Version(context.Context, *VersionRequest) (*VersionResponse, error)</span><br><span class="line">        <span class="comment">// RunPodSandbox creates and starts a pod-level sandbox. Runtimes must ensure</span></span><br><span class="line">        <span class="comment">// the sandbox is in the ready state on success.</span></span><br><span class="line">        RunPodSandbox(context.Context, *RunPodSandboxRequest) (*RunPodSandboxResponse, error)</span><br><span class="line">        <span class="comment">// StopPodSandbox stops any running process that is part of the sandbox and</span></span><br><span class="line">        <span class="comment">// reclaims network resources (e.g., IP addresses) allocated to the sandbox.</span></span><br><span class="line">        <span class="comment">// If there are any running containers in the sandbox, they must be forcibly</span></span><br><span class="line">        <span class="comment">// terminated.</span></span><br><span class="line">        <span class="comment">// This call is idempotent, and must not return an error if all relevant</span></span><br><span class="line">        <span class="comment">// resources have already been reclaimed. kubelet will call StopPodSandbox</span></span><br><span class="line">        <span class="comment">// at least once before calling RemovePodSandbox. It will also attempt to</span></span><br><span class="line">        <span class="comment">// reclaim resources eagerly, as soon as a sandbox is not needed. Hence,</span></span><br><span class="line">        <span class="comment">// multiple StopPodSandbox calls are expected.</span></span><br><span class="line">        StopPodSandbox(context.Context, *StopPodSandboxRequest) (*StopPodSandboxResponse, error)</span><br><span class="line">        <span class="comment">// RemovePodSandbox removes the sandbox. If there are any running containers</span></span><br><span class="line">        <span class="comment">// in the sandbox, they must be forcibly terminated and removed.</span></span><br><span class="line">        <span class="comment">// This call is idempotent, and must not return an error if the sandbox has</span></span><br><span class="line">        <span class="comment">// already been removed.</span></span><br><span class="line">        RemovePodSandbox(context.Context, *RemovePodSandboxRequest) (*RemovePodSandboxResponse, error)</span><br><span class="line">        <span class="comment">// PodSandboxStatus returns the status of the PodSandbox. If the PodSandbox is not</span></span><br><span class="line">        <span class="comment">// present, returns an error.</span></span><br><span class="line">        PodSandboxStatus(context.Context, *PodSandboxStatusRequest) (*PodSandboxStatusResponse, error)</span><br><span class="line">        <span class="comment">// ListPodSandbox returns a list of PodSandboxes.</span></span><br><span class="line">        ListPodSandbox(context.Context, *ListPodSandboxRequest) (*ListPodSandboxResponse, error)</span><br><span class="line">        <span class="comment">// CreateContainer creates a new container in specified PodSandbox</span></span><br><span class="line">        CreateContainer(context.Context, *CreateContainerRequest) (*CreateContainerResponse, error)</span><br><span class="line">        <span class="comment">// StartContainer starts the container.</span></span><br><span class="line">        StartContainer(context.Context, *StartContainerRequest) (*StartContainerResponse, error)</span><br><span class="line">        <span class="comment">// StopContainer stops a running container with a grace period (i.e., timeout).</span></span><br><span class="line">        <span class="comment">// This call is idempotent, and must not return an error if the container has</span></span><br><span class="line">        <span class="comment">// already been stopped.</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> what must the runtime do after the grace period is reached?</span></span><br><span class="line">        StopContainer(context.Context, *StopContainerRequest) (*StopContainerResponse, error)</span><br><span class="line">        <span class="comment">// RemoveContainer removes the container. If the container is running, the</span></span><br><span class="line">        <span class="comment">// container must be forcibly removed.</span></span><br><span class="line">        <span class="comment">// This call is idempotent, and must not return an error if the container has</span></span><br><span class="line">        <span class="comment">// already been removed.</span></span><br><span class="line">        RemoveContainer(context.Context, *RemoveContainerRequest) (*RemoveContainerResponse, error)</span><br><span class="line">        <span class="comment">// ListContainers lists all containers by filters.</span></span><br><span class="line">        ListContainers(context.Context, *ListContainersRequest) (*ListContainersResponse, error)</span><br><span class="line">        <span class="comment">// ContainerStatus returns status of the container. If the container is not</span></span><br><span class="line">        <span class="comment">// present, returns an error.</span></span><br><span class="line">        ContainerStatus(context.Context, *ContainerStatusRequest) (*ContainerStatusResponse, error)</span><br><span class="line">        <span class="comment">// UpdateContainerResources updates ContainerConfig of the container.</span></span><br><span class="line">        UpdateContainerResources(context.Context, *UpdateContainerResourcesRequest) (*UpdateContainerResourcesResponse, error)</span><br><span class="line">        <span class="comment">// ReopenContainerLog asks runtime to reopen the stdout/stderr log file</span></span><br><span class="line">        <span class="comment">// for the container. This is often called after the log file has been</span></span><br><span class="line">        <span class="comment">// rotated. If the container is not running, container runtime can choose</span></span><br><span class="line">        <span class="comment">// to either create a new log file and return nil, or return an error.</span></span><br><span class="line">        <span class="comment">// Once it returns error, new container log file MUST NOT be created.</span></span><br><span class="line">        ReopenContainerLog(context.Context, *ReopenContainerLogRequest) (*ReopenContainerLogResponse, error)</span><br><span class="line">        <span class="comment">// ExecSync runs a command in a container synchronously.</span></span><br><span class="line">        ExecSync(context.Context, *ExecSyncRequest) (*ExecSyncResponse, error)</span><br><span class="line">        <span class="comment">// Exec prepares a streaming endpoint to execute a command in the container.</span></span><br><span class="line">        Exec(context.Context, *ExecRequest) (*ExecResponse, error)</span><br><span class="line">        <span class="comment">// Attach prepares a streaming endpoint to attach to a running container.</span></span><br><span class="line">        Attach(context.Context, *AttachRequest) (*AttachResponse, error)</span><br><span class="line">        <span class="comment">// PortForward prepares a streaming endpoint to forward ports from a PodSandbox.</span></span><br><span class="line">        PortForward(context.Context, *PortForwardRequest) (*PortForwardResponse, error)</span><br><span class="line">        <span class="comment">// ContainerStats returns stats of the container. If the container does not</span></span><br><span class="line">        <span class="comment">// exist, the call returns an error.</span></span><br><span class="line">        ContainerStats(context.Context, *ContainerStatsRequest) (*ContainerStatsResponse, error)</span><br><span class="line">        <span class="comment">// ListContainerStats returns stats of all running containers.</span></span><br><span class="line">        ListContainerStats(context.Context, *ListContainerStatsRequest) (*ListContainerStatsResponse, error)</span><br><span class="line">        <span class="comment">// UpdateRuntimeConfig updates the runtime configuration based on the given request.</span></span><br><span class="line">        UpdateRuntimeConfig(context.Context, *UpdateRuntimeConfigRequest) (*UpdateRuntimeConfigResponse, error)</span><br><span class="line">        <span class="comment">// Status returns the status of the runtime.</span></span><br><span class="line">        Status(context.Context, *StatusRequest) (*StatusResponse, error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://blog.fleeto.us/post/how-kubectl-exec-works/images/kubelet-to-container-runtime.png" alt="kubelet-to-container-runtime.png"></p><p>既然如此，我们就该看看 Kubelet 和容器运行时之间的连接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// worker node</span><br><span class="line">$ ss -a -p |grep kubelet</span><br><span class="line">...</span><br><span class="line">u_str  ESTAB      0      0       * 157937                * 157387                users:((&quot;kubelet&quot;,pid=5714,fd=33))</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在 Kubelet（PID=5714）和 Docker 之间有一个新的 Unix Socket 连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// worker node</span><br><span class="line">$ ss -a -p |grep 157387</span><br><span class="line">...</span><br><span class="line">u_str  ESTAB      0      0       * 157937                * 157387                users:((&quot;kubelet&quot;,pid=5714,fd=33))</span><br><span class="line">u_str  ESTAB      0      0      /var/run/docker.sock 157387                * 157937                users:((&quot;dockerd&quot;,pid=1186,fd=14))</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>是 Docker 守护进程（PID 1186）执行了我们的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// worker node.</span><br><span class="line">$ ps -afx</span><br><span class="line">...</span><br><span class="line"> 1186 ?        Ssl    0:55 /usr/bin/dockerd -H fd://</span><br><span class="line">17784 ?        Sl     0:00      \_ docker-containerd-shim 53a0a08547b2f95986402d7f3b3e78702516244df049ba6c5aa012e81264aa3c /var/run/docker/libcontainerd/53a0a08547b2f95986402d7f3</span><br><span class="line">17801 pts/2    Ss     0:00          \_ sh</span><br><span class="line">17827 pts/2    S+     0:00              \_ sleep 5000</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="容器运行时的活动"><a href="#容器运行时的活动" class="headerlink" title="容器运行时的活动"></a>容器运行时的活动</h3><p>看看 cri-o 的源码，了解一下相关内容。运行逻辑和 Docker 类似。</p><p>它提供了一个服务，实现了 <code>RuntimeServiceServer</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Server implements the RuntimeService and ImageService</span></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">        config          libconfig.Config</span><br><span class="line">        seccompProfile  *seccomp.Seccomp</span><br><span class="line">        stream          StreamService</span><br><span class="line">        netPlugin       ocicni.CNIPlugin</span><br><span class="line">        hostportManager hostport.HostPortManager</span><br><span class="line"></span><br><span class="line">        appArmorProfile <span class="keyword">string</span></span><br><span class="line">        hostIP          <span class="keyword">string</span></span><br><span class="line">        bindAddress     <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">        *lib.ContainerServer</span><br><span class="line">        monitorsChan      <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">        defaultIDMappings *idtools.IDMappings</span><br><span class="line">        systemContext     *types.SystemContext <span class="comment">// Never nil</span></span><br><span class="line"></span><br><span class="line">        updateLock sync.RWMutex</span><br><span class="line"></span><br><span class="line">        seccompEnabled  <span class="keyword">bool</span></span><br><span class="line">        appArmorEnabled <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Exec prepares a streaming endpoint to execute a command in the container.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span> <span class="title">Exec</span><span class="params">(ctx context.Context, req *pb.ExecRequest)</span> <span class="params">(resp *pb.ExecResponse, err error)</span></span> &#123;</span><br><span class="line">        <span class="keyword">const</span> operation = <span class="string">"exec"</span></span><br><span class="line">        <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">                recordOperation(operation, time.Now())</span><br><span class="line">                recordError(operation, err)</span><br><span class="line">        &#125;()</span><br><span class="line"></span><br><span class="line">        resp, err = s.getExec(req)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"unable to prepare exec endpoint: %v"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resp, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链条的最后一环，容器运行时在工作节点上执行命令：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ExecContainer prepares a streaming endpoint to execute a command in the container.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *runtimeOCI)</span> <span class="title">ExecContainer</span><span class="params">(c *Container, cmd []<span class="keyword">string</span>, stdin io.Reader, stdout, stderr io.WriteCloser, tty <span class="keyword">bool</span>, resize &lt;-<span class="keyword">chan</span> remotecommand.TerminalSize)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        processFile, err := prepareProcessExec(c, cmd, tty)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">defer</span> os.RemoveAll(processFile.Name())</span><br><span class="line"></span><br><span class="line">        args := []<span class="keyword">string</span>&#123;rootFlag, r.root, <span class="string">"exec"</span>&#125;</span><br><span class="line">        args = <span class="built_in">append</span>(args, <span class="string">"--process"</span>, processFile.Name(), c.ID())</span><br><span class="line">        execCmd := exec.Command(r.path, args...)</span><br><span class="line">        <span class="keyword">if</span> v, found := os.LookupEnv(<span class="string">"XDG_RUNTIME_DIR"</span>); found &#123;</span><br><span class="line">                execCmd.Env = <span class="built_in">append</span>(execCmd.Env, fmt.Sprintf(<span class="string">"XDG_RUNTIME_DIR=%s"</span>, v))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> cmdErr, copyError error</span><br><span class="line">        <span class="keyword">if</span> tty &#123;</span><br><span class="line">                cmdErr = ttyCmd(execCmd, stdin, stdout, resize)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> stdin != <span class="literal">nil</span> &#123;</span><br><span class="line">                        <span class="comment">// Use an os.Pipe here as it returns true *os.File objects.</span></span><br><span class="line">                        <span class="comment">// This way, if you run 'kubectl exec &lt;pod&gt; -i bash' (no tty) and type 'exit',</span></span><br><span class="line">                        <span class="comment">// the call below to execCmd.Run() can unblock because its Stdin is the read half</span></span><br><span class="line">                        <span class="comment">// of the pipe.</span></span><br><span class="line">                        r, w, err := os.Pipe()</span><br><span class="line">                        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                                <span class="keyword">return</span> err</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; _, copyError = pools.Copy(w, stdin) &#125;()</span><br><span class="line"></span><br><span class="line">                        execCmd.Stdin = r</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> stdout != <span class="literal">nil</span> &#123;</span><br><span class="line">                        execCmd.Stdout = stdout</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> stderr != <span class="literal">nil</span> &#123;</span><br><span class="line">                        execCmd.Stderr = stderr</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                cmdErr = execCmd.Run()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> copyError != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> copyError</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> exitErr, ok := cmdErr.(*exec.ExitError); ok &#123;</span><br><span class="line">                <span class="keyword">return</span> &amp;utilexec.ExitErrorWrapper&#123;ExitError: exitErr&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cmdErr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://blog.fleeto.us/post/how-kubectl-exec-works/images/container-runtime-to-kernel.png" alt="container-runtime-to-kernel"></p><p>最后，内核执行了任务：</p><p><img src="https://blog.fleeto.us/post/how-kubectl-exec-works/images/kernel-puts.png" alt="kernel-puts.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>API Server 会向 Kubelet 发起连接。</li><li>在 exec 结束之前，连接持续存在。<ul><li>Kubectl 和 API Server 之间</li><li>API Server 和 Kubelet 之间</li><li>Kubelet 和容器运行时之间</li></ul></li><li>Kubectl 或者 API Server 无法在工作节点上运行任何东西。Kubelet 可以通过和容器运行时的互动来完成任务。</li></ul><p><a href="https://blog.fleeto.us/tags/kubernetes/" target="_blank" rel="noopener">kubernetes</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文：&lt;a href=&quot;https://erkanerol.github.io/post/how-kubectl-exec-works/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;How does ‘kubectl exec’ work?&lt;/a&gt;&lt;/p
      
    
    </summary>
    
    
      <category term="k8s" scheme="http://liupeng0518.github.io/categories/k8s/"/>
    
    
      <category term="k8s" scheme="http://liupeng0518.github.io/tags/k8s/"/>
    
      <category term="kubectl" scheme="http://liupeng0518.github.io/tags/kubectl/"/>
    
  </entry>
  
</feed>
